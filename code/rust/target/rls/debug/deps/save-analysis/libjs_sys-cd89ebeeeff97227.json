{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35","program":"/home/hniemeyer/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","js_sys","/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=cd89ebeeeff97227","-C","extra-filename=-cd89ebeeeff97227","--out-dir","/home/hniemeyer/src/wasm/accu2020example_rust/target/rls/debug/deps","-L","dependency=/home/hniemeyer/src/wasm/accu2020example_rust/target/rls/debug/deps","--extern","wasm_bindgen=/home/hniemeyer/src/wasm/accu2020example_rust/target/rls/debug/deps/libwasm_bindgen-b88076236cf3a333.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/hniemeyer/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/hniemeyer/src/wasm/accu2020example_rust/target/rls/debug/deps/libjs_sys-cd89ebeeeff97227.rmeta"},"prelude":{"crate_id":{"name":"js_sys","disambiguator":[3170729948765259809,11206569165002759436]},"crate_root":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src","external_crates":[{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14029911340352309513,3694302842271320647]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5366521311420338507,5001693844293236078]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16078967021793905033,18044181950654841110]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[3256375668792353550,7694578384779899277]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[17967524032803306908,5163911630854790873]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7486411228932131176,10611882423765912104]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8951493940525711481,6598059053846807751]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[6080538021290120973,12135415365643254465]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[2404946192574906823,11198495443784404083]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[8156052144428984436,15205012491124168822]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[11527475684179663565,15577722846879460413]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4615572763888095747,7180296191060376175]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16051702409717455556,18428390842256153874]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14083788917415871355,15092499333930635081]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":15,"id":{"name":"wasm_bindgen","disambiguator":[15497433899060451508,13657436466989081033]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":16,"id":{"name":"wasm_bindgen_macro","disambiguator":[225625686758107807,13316208820223846040]}},{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[10509600652491765595,688247222960852956]}}],"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":0,"byte_end":244185,"line_start":1,"line_end":4984,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":0,"byte_end":244185,"line_start":1,"line_end":4984,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":340},{"krate":0,"index":351},{"krate":0,"index":349},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":158},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":283},{"krate":0,"index":286},{"krate":0,"index":289},{"krate":0,"index":292},{"krate":0,"index":295},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":334},{"krate":0,"index":337},{"krate":0,"index":353},{"krate":0,"index":360},{"krate":0,"index":357},{"krate":0,"index":16},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":436},{"krate":0,"index":447},{"krate":0,"index":445},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":363},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":519},{"krate":0,"index":523},{"krate":0,"index":521},{"krate":0,"index":449},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":507},{"krate":0,"index":510},{"krate":0,"index":513},{"krate":0,"index":516},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":35},{"krate":0,"index":628},{"krate":0,"index":637},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":562},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":622},{"krate":0,"index":625},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":793},{"krate":0,"index":804},{"krate":0,"index":802},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":639},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":697},{"krate":0,"index":700},{"krate":0,"index":703},{"krate":0,"index":706},{"krate":0,"index":709},{"krate":0,"index":712},{"krate":0,"index":715},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":724},{"krate":0,"index":727},{"krate":0,"index":730},{"krate":0,"index":733},{"krate":0,"index":736},{"krate":0,"index":739},{"krate":0,"index":742},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":754},{"krate":0,"index":757},{"krate":0,"index":760},{"krate":0,"index":763},{"krate":0,"index":766},{"krate":0,"index":769},{"krate":0,"index":772},{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":882},{"krate":0,"index":893},{"krate":0,"index":891},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":806},{"krate":0,"index":858},{"krate":0,"index":861},{"krate":0,"index":864},{"krate":0,"index":867},{"krate":0,"index":870},{"krate":0,"index":873},{"krate":0,"index":876},{"krate":0,"index":879},{"krate":0,"index":962},{"krate":0,"index":973},{"krate":0,"index":971},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":895},{"krate":0,"index":947},{"krate":0,"index":950},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":1079},{"krate":0,"index":1090},{"krate":0,"index":1088},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":975},{"krate":0,"index":1028},{"krate":0,"index":1031},{"krate":0,"index":1034},{"krate":0,"index":1037},{"krate":0,"index":1040},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1049},{"krate":0,"index":1052},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1061},{"krate":0,"index":1064},{"krate":0,"index":1067},{"krate":0,"index":1070},{"krate":0,"index":1073},{"krate":0,"index":1076},{"krate":0,"index":45},{"krate":0,"index":1159},{"krate":0,"index":1170},{"krate":0,"index":1168},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1092},{"krate":0,"index":1144},{"krate":0,"index":1147},{"krate":0,"index":1150},{"krate":0,"index":1153},{"krate":0,"index":1156},{"krate":0,"index":1254},{"krate":0,"index":1265},{"krate":0,"index":1263},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1172},{"krate":0,"index":1224},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":1233},{"krate":0,"index":1236},{"krate":0,"index":1239},{"krate":0,"index":1242},{"krate":0,"index":1245},{"krate":0,"index":1248},{"krate":0,"index":1251},{"krate":0,"index":1267},{"krate":0,"index":1270},{"krate":0,"index":1273},{"krate":0,"index":1332},{"krate":0,"index":1336},{"krate":0,"index":1334},{"krate":0,"index":1276},{"krate":0,"index":1329},{"krate":0,"index":47},{"krate":0,"index":1451},{"krate":0,"index":1455},{"krate":0,"index":1453},{"krate":0,"index":1395},{"krate":0,"index":1448},{"krate":0,"index":49},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":1521},{"krate":0,"index":1532},{"krate":0,"index":1530},{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1457},{"krate":0,"index":1509},{"krate":0,"index":1512},{"krate":0,"index":1515},{"krate":0,"index":1518},{"krate":0,"index":78},{"krate":0,"index":1703},{"krate":0,"index":1705},{"krate":0,"index":1604},{"krate":0,"index":1658},{"krate":0,"index":1661},{"krate":0,"index":1664},{"krate":0,"index":1667},{"krate":0,"index":1670},{"krate":0,"index":1673},{"krate":0,"index":1676},{"krate":0,"index":1679},{"krate":0,"index":1682},{"krate":0,"index":1685},{"krate":0,"index":1688},{"krate":0,"index":1691},{"krate":0,"index":1694},{"krate":0,"index":1697},{"krate":0,"index":1700},{"krate":0,"index":80},{"krate":0,"index":1707},{"krate":0,"index":1709},{"krate":0,"index":1711},{"krate":0,"index":1713},{"krate":0,"index":1715},{"krate":0,"index":1717},{"krate":0,"index":1719},{"krate":0,"index":1721},{"krate":0,"index":1723},{"krate":0,"index":1725},{"krate":0,"index":1727},{"krate":0,"index":1729},{"krate":0,"index":1731},{"krate":0,"index":1733},{"krate":0,"index":1735},{"krate":0,"index":1737},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":1971},{"krate":0,"index":1982},{"krate":0,"index":1980},{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1739},{"krate":0,"index":1791},{"krate":0,"index":1794},{"krate":0,"index":1797},{"krate":0,"index":1800},{"krate":0,"index":1803},{"krate":0,"index":1806},{"krate":0,"index":1809},{"krate":0,"index":1812},{"krate":0,"index":1815},{"krate":0,"index":1818},{"krate":0,"index":1821},{"krate":0,"index":1824},{"krate":0,"index":1827},{"krate":0,"index":1830},{"krate":0,"index":1833},{"krate":0,"index":1836},{"krate":0,"index":1839},{"krate":0,"index":1842},{"krate":0,"index":1845},{"krate":0,"index":1848},{"krate":0,"index":1851},{"krate":0,"index":1854},{"krate":0,"index":1857},{"krate":0,"index":1860},{"krate":0,"index":1863},{"krate":0,"index":1866},{"krate":0,"index":1869},{"krate":0,"index":1872},{"krate":0,"index":1875},{"krate":0,"index":1878},{"krate":0,"index":1881},{"krate":0,"index":1884},{"krate":0,"index":1887},{"krate":0,"index":1890},{"krate":0,"index":1893},{"krate":0,"index":1896},{"krate":0,"index":1899},{"krate":0,"index":1902},{"krate":0,"index":1905},{"krate":0,"index":1908},{"krate":0,"index":1911},{"krate":0,"index":1914},{"krate":0,"index":1917},{"krate":0,"index":1920},{"krate":0,"index":1923},{"krate":0,"index":1926},{"krate":0,"index":1929},{"krate":0,"index":1932},{"krate":0,"index":1935},{"krate":0,"index":1938},{"krate":0,"index":1941},{"krate":0,"index":1944},{"krate":0,"index":1947},{"krate":0,"index":1950},{"krate":0,"index":1953},{"krate":0,"index":1956},{"krate":0,"index":1959},{"krate":0,"index":1962},{"krate":0,"index":1965},{"krate":0,"index":1968},{"krate":0,"index":2129},{"krate":0,"index":2133},{"krate":0,"index":2131},{"krate":0,"index":1984},{"krate":0,"index":2036},{"krate":0,"index":2039},{"krate":0,"index":2042},{"krate":0,"index":2045},{"krate":0,"index":2048},{"krate":0,"index":2051},{"krate":0,"index":2054},{"krate":0,"index":2057},{"krate":0,"index":2060},{"krate":0,"index":2063},{"krate":0,"index":2066},{"krate":0,"index":2069},{"krate":0,"index":2072},{"krate":0,"index":2075},{"krate":0,"index":2078},{"krate":0,"index":2081},{"krate":0,"index":2084},{"krate":0,"index":2087},{"krate":0,"index":2090},{"krate":0,"index":2093},{"krate":0,"index":2096},{"krate":0,"index":2099},{"krate":0,"index":2102},{"krate":0,"index":2105},{"krate":0,"index":2108},{"krate":0,"index":2111},{"krate":0,"index":2114},{"krate":0,"index":2117},{"krate":0,"index":2120},{"krate":0,"index":2123},{"krate":0,"index":2126},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":2193},{"krate":0,"index":2197},{"krate":0,"index":2195},{"krate":0,"index":2135},{"krate":0,"index":2187},{"krate":0,"index":2190},{"krate":0,"index":2266},{"krate":0,"index":2277},{"krate":0,"index":2275},{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2199},{"krate":0,"index":2251},{"krate":0,"index":2254},{"krate":0,"index":2257},{"krate":0,"index":2260},{"krate":0,"index":2263},{"krate":0,"index":2346},{"krate":0,"index":2357},{"krate":0,"index":2355},{"krate":0,"index":2351},{"krate":0,"index":2352},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2279},{"krate":0,"index":2331},{"krate":0,"index":2334},{"krate":0,"index":2337},{"krate":0,"index":2340},{"krate":0,"index":2343},{"krate":0,"index":90},{"krate":0,"index":2539},{"krate":0,"index":2550},{"krate":0,"index":2548},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":2397},{"krate":0,"index":2449},{"krate":0,"index":2452},{"krate":0,"index":2455},{"krate":0,"index":2458},{"krate":0,"index":2461},{"krate":0,"index":2464},{"krate":0,"index":2467},{"krate":0,"index":2470},{"krate":0,"index":2473},{"krate":0,"index":2476},{"krate":0,"index":2479},{"krate":0,"index":2482},{"krate":0,"index":2485},{"krate":0,"index":2488},{"krate":0,"index":2491},{"krate":0,"index":2494},{"krate":0,"index":2497},{"krate":0,"index":2500},{"krate":0,"index":2503},{"krate":0,"index":2506},{"krate":0,"index":2509},{"krate":0,"index":2512},{"krate":0,"index":2515},{"krate":0,"index":2518},{"krate":0,"index":2521},{"krate":0,"index":2524},{"krate":0,"index":2527},{"krate":0,"index":2530},{"krate":0,"index":2533},{"krate":0,"index":2536},{"krate":0,"index":2631},{"krate":0,"index":2642},{"krate":0,"index":2640},{"krate":0,"index":2636},{"krate":0,"index":2637},{"krate":0,"index":2633},{"krate":0,"index":2634},{"krate":0,"index":2552},{"krate":0,"index":2604},{"krate":0,"index":2607},{"krate":0,"index":2610},{"krate":0,"index":2613},{"krate":0,"index":2616},{"krate":0,"index":2619},{"krate":0,"index":2622},{"krate":0,"index":2625},{"krate":0,"index":2628},{"krate":0,"index":2644},{"krate":0,"index":2647},{"krate":0,"index":2650},{"krate":0,"index":2720},{"krate":0,"index":2731},{"krate":0,"index":2729},{"krate":0,"index":2725},{"krate":0,"index":2726},{"krate":0,"index":2722},{"krate":0,"index":2723},{"krate":0,"index":2653},{"krate":0,"index":2705},{"krate":0,"index":2708},{"krate":0,"index":2711},{"krate":0,"index":2714},{"krate":0,"index":2717},{"krate":0,"index":2800},{"krate":0,"index":2811},{"krate":0,"index":2809},{"krate":0,"index":2805},{"krate":0,"index":2806},{"krate":0,"index":2802},{"krate":0,"index":2803},{"krate":0,"index":2733},{"krate":0,"index":2785},{"krate":0,"index":2788},{"krate":0,"index":2791},{"krate":0,"index":2794},{"krate":0,"index":2797},{"krate":0,"index":2880},{"krate":0,"index":2891},{"krate":0,"index":2889},{"krate":0,"index":2885},{"krate":0,"index":2886},{"krate":0,"index":2882},{"krate":0,"index":2883},{"krate":0,"index":2813},{"krate":0,"index":2865},{"krate":0,"index":2868},{"krate":0,"index":2871},{"krate":0,"index":2874},{"krate":0,"index":2877},{"krate":0,"index":2966},{"krate":0,"index":2977},{"krate":0,"index":2975},{"krate":0,"index":2971},{"krate":0,"index":2972},{"krate":0,"index":2968},{"krate":0,"index":2969},{"krate":0,"index":2893},{"krate":0,"index":2945},{"krate":0,"index":2948},{"krate":0,"index":2951},{"krate":0,"index":2954},{"krate":0,"index":2957},{"krate":0,"index":2960},{"krate":0,"index":2963},{"krate":0,"index":3049},{"krate":0,"index":3060},{"krate":0,"index":3058},{"krate":0,"index":3054},{"krate":0,"index":3055},{"krate":0,"index":3051},{"krate":0,"index":3052},{"krate":0,"index":2979},{"krate":0,"index":3031},{"krate":0,"index":3034},{"krate":0,"index":3037},{"krate":0,"index":3040},{"krate":0,"index":3043},{"krate":0,"index":3046},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":3867},{"krate":0,"index":3876},{"krate":0,"index":3872},{"krate":0,"index":3873},{"krate":0,"index":3869},{"krate":0,"index":3870},{"krate":0,"index":3628},{"krate":0,"index":3681},{"krate":0,"index":3684},{"krate":0,"index":3687},{"krate":0,"index":3690},{"krate":0,"index":3693},{"krate":0,"index":3696},{"krate":0,"index":3699},{"krate":0,"index":3702},{"krate":0,"index":3705},{"krate":0,"index":3708},{"krate":0,"index":3711},{"krate":0,"index":3714},{"krate":0,"index":3717},{"krate":0,"index":3720},{"krate":0,"index":3723},{"krate":0,"index":3726},{"krate":0,"index":3729},{"krate":0,"index":3732},{"krate":0,"index":3735},{"krate":0,"index":3738},{"krate":0,"index":3741},{"krate":0,"index":3744},{"krate":0,"index":3747},{"krate":0,"index":3750},{"krate":0,"index":3753},{"krate":0,"index":3756},{"krate":0,"index":3759},{"krate":0,"index":3762},{"krate":0,"index":3765},{"krate":0,"index":3768},{"krate":0,"index":3771},{"krate":0,"index":3774},{"krate":0,"index":3777},{"krate":0,"index":3780},{"krate":0,"index":3783},{"krate":0,"index":3786},{"krate":0,"index":3789},{"krate":0,"index":3792},{"krate":0,"index":3795},{"krate":0,"index":3798},{"krate":0,"index":3801},{"krate":0,"index":3804},{"krate":0,"index":3807},{"krate":0,"index":3810},{"krate":0,"index":3813},{"krate":0,"index":3816},{"krate":0,"index":3819},{"krate":0,"index":3822},{"krate":0,"index":3825},{"krate":0,"index":3828},{"krate":0,"index":3831},{"krate":0,"index":3834},{"krate":0,"index":3837},{"krate":0,"index":3840},{"krate":0,"index":3843},{"krate":0,"index":3846},{"krate":0,"index":3849},{"krate":0,"index":3852},{"krate":0,"index":3855},{"krate":0,"index":3858},{"krate":0,"index":3861},{"krate":0,"index":3864},{"krate":0,"index":96},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":3979},{"krate":0,"index":3983},{"krate":0,"index":3981},{"krate":0,"index":3878},{"krate":0,"index":3931},{"krate":0,"index":3934},{"krate":0,"index":3937},{"krate":0,"index":3940},{"krate":0,"index":3943},{"krate":0,"index":3946},{"krate":0,"index":3949},{"krate":0,"index":3952},{"krate":0,"index":3955},{"krate":0,"index":3958},{"krate":0,"index":3961},{"krate":0,"index":3964},{"krate":0,"index":3967},{"krate":0,"index":3970},{"krate":0,"index":3973},{"krate":0,"index":3976},{"krate":0,"index":129},{"krate":0,"index":4382},{"krate":0,"index":4386},{"krate":0,"index":4384},{"krate":0,"index":4297},{"krate":0,"index":4349},{"krate":0,"index":4352},{"krate":0,"index":4355},{"krate":0,"index":4358},{"krate":0,"index":4361},{"krate":0,"index":4364},{"krate":0,"index":4367},{"krate":0,"index":4370},{"krate":0,"index":4373},{"krate":0,"index":4376},{"krate":0,"index":4379},{"krate":0,"index":131},{"krate":0,"index":137},{"krate":0,"index":4636},{"krate":0,"index":4640},{"krate":0,"index":4638},{"krate":0,"index":4539},{"krate":0,"index":4591},{"krate":0,"index":4594},{"krate":0,"index":4597},{"krate":0,"index":4600},{"krate":0,"index":4603},{"krate":0,"index":4606},{"krate":0,"index":4609},{"krate":0,"index":4612},{"krate":0,"index":4615},{"krate":0,"index":4618},{"krate":0,"index":4621},{"krate":0,"index":4624},{"krate":0,"index":4627},{"krate":0,"index":4630},{"krate":0,"index":4633},{"krate":0,"index":4458},{"krate":0,"index":4464},{"krate":0,"index":4739},{"krate":0,"index":4743},{"krate":0,"index":4741},{"krate":0,"index":4642},{"krate":0,"index":4694},{"krate":0,"index":4697},{"krate":0,"index":4700},{"krate":0,"index":4703},{"krate":0,"index":4706},{"krate":0,"index":4709},{"krate":0,"index":4712},{"krate":0,"index":4715},{"krate":0,"index":4718},{"krate":0,"index":4721},{"krate":0,"index":4724},{"krate":0,"index":4727},{"krate":0,"index":4730},{"krate":0,"index":4733},{"krate":0,"index":4736},{"krate":0,"index":4467},{"krate":0,"index":4473},{"krate":0,"index":4842},{"krate":0,"index":4846},{"krate":0,"index":4844},{"krate":0,"index":4745},{"krate":0,"index":4797},{"krate":0,"index":4800},{"krate":0,"index":4803},{"krate":0,"index":4806},{"krate":0,"index":4809},{"krate":0,"index":4812},{"krate":0,"index":4815},{"krate":0,"index":4818},{"krate":0,"index":4821},{"krate":0,"index":4824},{"krate":0,"index":4827},{"krate":0,"index":4830},{"krate":0,"index":4833},{"krate":0,"index":4836},{"krate":0,"index":4839},{"krate":0,"index":4476},{"krate":0,"index":4482},{"krate":0,"index":4945},{"krate":0,"index":4949},{"krate":0,"index":4947},{"krate":0,"index":4848},{"krate":0,"index":4900},{"krate":0,"index":4903},{"krate":0,"index":4906},{"krate":0,"index":4909},{"krate":0,"index":4912},{"krate":0,"index":4915},{"krate":0,"index":4918},{"krate":0,"index":4921},{"krate":0,"index":4924},{"krate":0,"index":4927},{"krate":0,"index":4930},{"krate":0,"index":4933},{"krate":0,"index":4936},{"krate":0,"index":4939},{"krate":0,"index":4942},{"krate":0,"index":4485},{"krate":0,"index":4491},{"krate":0,"index":5048},{"krate":0,"index":5052},{"krate":0,"index":5050},{"krate":0,"index":4951},{"krate":0,"index":5003},{"krate":0,"index":5006},{"krate":0,"index":5009},{"krate":0,"index":5012},{"krate":0,"index":5015},{"krate":0,"index":5018},{"krate":0,"index":5021},{"krate":0,"index":5024},{"krate":0,"index":5027},{"krate":0,"index":5030},{"krate":0,"index":5033},{"krate":0,"index":5036},{"krate":0,"index":5039},{"krate":0,"index":5042},{"krate":0,"index":5045},{"krate":0,"index":4494},{"krate":0,"index":4500},{"krate":0,"index":5151},{"krate":0,"index":5155},{"krate":0,"index":5153},{"krate":0,"index":5054},{"krate":0,"index":5106},{"krate":0,"index":5109},{"krate":0,"index":5112},{"krate":0,"index":5115},{"krate":0,"index":5118},{"krate":0,"index":5121},{"krate":0,"index":5124},{"krate":0,"index":5127},{"krate":0,"index":5130},{"krate":0,"index":5133},{"krate":0,"index":5136},{"krate":0,"index":5139},{"krate":0,"index":5142},{"krate":0,"index":5145},{"krate":0,"index":5148},{"krate":0,"index":4503},{"krate":0,"index":4509},{"krate":0,"index":5254},{"krate":0,"index":5258},{"krate":0,"index":5256},{"krate":0,"index":5157},{"krate":0,"index":5209},{"krate":0,"index":5212},{"krate":0,"index":5215},{"krate":0,"index":5218},{"krate":0,"index":5221},{"krate":0,"index":5224},{"krate":0,"index":5227},{"krate":0,"index":5230},{"krate":0,"index":5233},{"krate":0,"index":5236},{"krate":0,"index":5239},{"krate":0,"index":5242},{"krate":0,"index":5245},{"krate":0,"index":5248},{"krate":0,"index":5251},{"krate":0,"index":4512},{"krate":0,"index":4518},{"krate":0,"index":5357},{"krate":0,"index":5361},{"krate":0,"index":5359},{"krate":0,"index":5260},{"krate":0,"index":5312},{"krate":0,"index":5315},{"krate":0,"index":5318},{"krate":0,"index":5321},{"krate":0,"index":5324},{"krate":0,"index":5327},{"krate":0,"index":5330},{"krate":0,"index":5333},{"krate":0,"index":5336},{"krate":0,"index":5339},{"krate":0,"index":5342},{"krate":0,"index":5345},{"krate":0,"index":5348},{"krate":0,"index":5351},{"krate":0,"index":5354},{"krate":0,"index":4521},{"krate":0,"index":4527},{"krate":0,"index":5460},{"krate":0,"index":5464},{"krate":0,"index":5462},{"krate":0,"index":5363},{"krate":0,"index":5415},{"krate":0,"index":5418},{"krate":0,"index":5421},{"krate":0,"index":5424},{"krate":0,"index":5427},{"krate":0,"index":5430},{"krate":0,"index":5433},{"krate":0,"index":5436},{"krate":0,"index":5439},{"krate":0,"index":5442},{"krate":0,"index":5445},{"krate":0,"index":5448},{"krate":0,"index":5451},{"krate":0,"index":5454},{"krate":0,"index":5457},{"krate":0,"index":4530},{"krate":0,"index":4536}],"decl_id":null,"docs":" Bindings to JavaScript's standard, built-in objects, including their methods\n and properties.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":138},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":2153,"byte_end":2163,"line_start":54,"line_end":54,"column_start":12,"column_end":22},"name":"decode_uri","qualname":"::decode_uri","value":"fn (encoded: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `decodeURI()` function decodes a Uniform Resource Identifier (URI)\n previously created by `encodeURI` or by a similar routine.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":140},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":2589,"byte_end":2609,"line_start":61,"line_end":61,"column_start":12,"column_end":32},"name":"decode_uri_component","qualname":"::decode_uri_component","value":"fn (encoded: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `decodeURIComponent()` function decodes a Uniform Resource Identifier (URI) component\n previously created by `encodeURIComponent` or by a similar routine.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":142},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":3182,"byte_end":3192,"line_start":71,"line_end":71,"column_start":12,"column_end":22},"name":"encode_uri","qualname":"::encode_uri","value":"fn (decoded: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `encodeURI()` function encodes a Uniform Resource Identifier (URI)\n by replacing each instance of certain characters by one, two, three, or\n four escape sequences representing the UTF-8 encoding of the character\n (will only be four escape sequences for characters composed of two\n \"surrogate\" characters).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":144},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":3777,"byte_end":3797,"line_start":80,"line_end":80,"column_start":12,"column_end":32},"name":"encode_uri_component","qualname":"::encode_uri_component","value":"fn (decoded: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `encodeURIComponent()` function encodes a Uniform Resource Identifier (URI) component\n by replacing each instance of certain characters by one, two, three, or four escape sequences\n representing the UTF-8 encoding of the character\n (will only be four escape sequences for characters composed of two \"surrogate\" characters).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":146},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":4069,"byte_end":4073,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"eval","qualname":"::eval","value":"fn (js_source_text: &str) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `eval()` function evaluates JavaScript code represented as a string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":148},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":4466,"byte_end":4475,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"is_finite","qualname":"::is_finite","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The global `isFinite()` function determines whether the passed value is a finite number.\n If needed, the parameter is first converted to a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":150},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":4855,"byte_end":4864,"line_start":100,"line_end":100,"column_start":12,"column_end":21},"name":"parse_int","qualname":"::parse_int","value":"fn (text: &str, radix: u8) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `parseInt()` function parses a string argument and returns an integer\n of the specified radix (the base in mathematical numeral systems), or NaN on error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":152},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":5196,"byte_end":5207,"line_start":107,"line_end":107,"column_start":12,"column_end":23},"name":"parse_float","qualname":"::parse_float","value":"fn (text: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `parseFloat()` function parses an argument and returns a floating point number,\n or NaN on error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":154},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":5528,"byte_end":5534,"line_start":114,"line_end":114,"column_start":12,"column_end":18},"name":"escape","qualname":"::escape","value":"fn (string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `escape()` function computes a new string in which certain characters have been\n replaced by a hexadecimal escape sequence.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":156},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6037,"byte_end":6045,"line_start":123,"line_end":123,"column_start":12,"column_end":20},"name":"unescape","qualname":"::unescape","value":"fn (string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `unescape()` function computes a new string in which hexadecimal escape\n sequences are replaced with the character that it represents. The escape sequences might\n be introduced by a function like `escape`. Usually, `decodeURI` or `decodeURIComponent`\n are preferred over `unescape`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":1791,"byte_end":1806,"line_start":47,"line_end":47,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":340},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6238,"byte_end":6243,"line_start":131,"line_end":131,"column_start":14,"column_end":19},"name":"Array","qualname":"::Array","value":"Array {  }","parent":null,"children":[{"krate":0,"index":341}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6325,"byte_end":6328,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<Array>::new","value":"fn () -> Array","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6483,"byte_end":6498,"line_start":139,"line_end":139,"column_start":12,"column_end":27},"name":"new_with_length","qualname":"<Array>::new_with_length","value":"fn (len: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" Creates a new array with the specified length (elements are initialized to `undefined`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6683,"byte_end":6686,"line_start":143,"line_end":143,"column_start":12,"column_end":15},"name":"get","qualname":"<Array>::get","value":"fn (&self, index: u32) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the element at the index (returns `undefined` if the index is out of range).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6888,"byte_end":6891,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"set","qualname":"<Array>::set","value":"fn (&self, index: u32, value: JsValue) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the element at the index (auto-enlarges the array if the index is out of range).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":7244,"byte_end":7250,"line_start":155,"line_end":155,"column_start":12,"column_end":18},"name":"delete","qualname":"<Array>::delete","value":"fn (&self, index: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Deletes the element at the index (does nothing if the index is out of range).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":7464,"byte_end":7468,"line_start":160,"line_end":160,"column_start":12,"column_end":16},"name":"from","qualname":"<Array>::from","value":"fn (val: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Array.from()` method creates a new, shallow-copied `Array` instance\n from an array-like or iterable object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":7847,"byte_end":7858,"line_start":167,"line_end":167,"column_start":12,"column_end":23},"name":"copy_within","qualname":"<Array>::copy_within","value":"fn (&self, target: i32, start: i32, end: i32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `copyWithin()` method shallow copies part of an array to another\n location in the same array and returns it, without modifying its size.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":8246,"byte_end":8252,"line_start":174,"line_end":174,"column_start":12,"column_end":18},"name":"concat","qualname":"<Array>::concat","value":"fn (&self, array: &Array) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `concat()` method is used to merge two or more arrays. This method\n does not change the existing arrays, but instead returns a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":8591,"byte_end":8596,"line_start":181,"line_end":181,"column_start":12,"column_end":17},"name":"every","qualname":"<Array>::every","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `every()` method tests whether all elements in the array pass the test\n implemented by the provided function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":9003,"byte_end":9007,"line_start":188,"line_end":188,"column_start":12,"column_end":16},"name":"fill","qualname":"<Array>::fill","value":"fn (&self, value: &JsValue, start: u32, end: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":9375,"byte_end":9381,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"filter","qualname":"<Array>::filter","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `filter()` method creates a new array with all elements that pass the\n test implemented by the provided function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":9801,"byte_end":9805,"line_start":202,"line_end":202,"column_start":12,"column_end":16},"name":"find","qualname":"<Array>::find","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `find()` method returns the value of the first element in the array that satisfies\n  the provided testing function. Otherwise `undefined` is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":10248,"byte_end":10258,"line_start":209,"line_end":209,"column_start":12,"column_end":22},"name":"find_index","qualname":"<Array>::find_index","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `findIndex()` method returns the index of the first element in the array that\n satisfies the provided testing function. Otherwise -1 is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":10650,"byte_end":10654,"line_start":216,"line_end":216,"column_start":12,"column_end":16},"name":"flat","qualname":"<Array>::flat","value":"fn (&self, depth: i32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `flat()` method creates a new array with all sub-array elements concatenated into it\n recursively up to the specified depth.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":11014,"byte_end":11022,"line_start":223,"line_end":223,"column_start":12,"column_end":20},"name":"flat_map","qualname":"<Array>::flat_map","value":"fn (&self, callback: &mut dyn FnMut(JsValue, u32, Array) -> Vec<JsValue>) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `flatMap()` method first maps each element using a mapping function, then flattens\n the result into a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":11413,"byte_end":11421,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(JsValue, u32, Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once for each array element.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":11793,"byte_end":11801,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"includes","qualname":"<Array>::includes","value":"fn (&self, value: &JsValue, from_index: i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `includes()` method determines whether an array includes a certain\n element, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":12193,"byte_end":12201,"line_start":246,"line_end":246,"column_start":12,"column_end":20},"name":"index_of","qualname":"<Array>::index_of","value":"fn (&self, value: &JsValue, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `indexOf()` method returns the first index at which a given element\n can be found in the array, or -1 if it is not present.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":12553,"byte_end":12561,"line_start":252,"line_end":252,"column_start":12,"column_end":20},"name":"is_array","qualname":"<Array>::is_array","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Array.isArray()` method determines whether the passed value is an Array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":12889,"byte_end":12893,"line_start":259,"line_end":259,"column_start":12,"column_end":16},"name":"join","qualname":"<Array>::join","value":"fn (&self, delimiter: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `join()` method joins all elements of an array (or an array-like object)\n into a string and returns this string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":13347,"byte_end":13360,"line_start":267,"line_end":267,"column_start":12,"column_end":25},"name":"last_index_of","qualname":"<Array>::last_index_of","value":"fn (&self, value: &JsValue, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `lastIndexOf()` method returns the last index at which a given element\n can be found in the array, or -1 if it is not present. The array is\n searched backwards, starting at fromIndex.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":13875,"byte_end":13881,"line_start":276,"line_end":276,"column_start":12,"column_end":18},"name":"length","qualname":"<Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property of an object which is an instance of type Array\n sets or returns the number of elements in that array. The value is an\n unsigned, 32-bit integer that is always numerically greater than the\n highest index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":14507,"byte_end":14510,"line_start":286,"line_end":286,"column_start":12,"column_end":15},"name":"map","qualname":"<Array>::map","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" `map()` calls a provided callback function once for each element in an array,\n in order, and constructs a new array from the results. callback is invoked\n only for indexes of the array which have assigned values, including undefined.\n It is not called for missing elements of the array (that is, indexes that have\n never been set, which have been deleted or which have never been assigned a value).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":15459,"byte_end":15462,"line_start":304,"line_end":304,"column_start":12,"column_end":15},"name":"of1","qualname":"<Array>::of1","value":"fn (a: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Array.of()` method creates a new Array instance with a variable\n number of arguments, regardless of number or type of the arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":15677,"byte_end":15680,"line_start":308,"line_end":308,"column_start":12,"column_end":15},"name":"of2","qualname":"<Array>::of2","value":"fn (a: &JsValue, b: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":15908,"byte_end":15911,"line_start":312,"line_end":312,"column_start":12,"column_end":15},"name":"of3","qualname":"<Array>::of3","value":"fn (a: &JsValue, b: &JsValue, c: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":16152,"byte_end":16155,"line_start":316,"line_end":316,"column_start":12,"column_end":15},"name":"of4","qualname":"<Array>::of4","value":"fn (a: &JsValue, b: &JsValue, c: &JsValue, d: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":16409,"byte_end":16412,"line_start":320,"line_end":320,"column_start":12,"column_end":15},"name":"of5","qualname":"<Array>::of5","value":"fn (a: &JsValue, b: &JsValue, c: &JsValue, d: &JsValue, e: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":16801,"byte_end":16804,"line_start":327,"line_end":327,"column_start":12,"column_end":15},"name":"pop","qualname":"<Array>::pop","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `pop()` method removes the last element from an array and returns that\n element. This method changes the length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":17126,"byte_end":17130,"line_start":334,"line_end":334,"column_start":12,"column_end":16},"name":"push","qualname":"<Array>::push","value":"fn (&self, value: &JsValue) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `push()` method adds one or more elements to the end of an array and\n returns the new length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":17504,"byte_end":17510,"line_start":341,"line_end":341,"column_start":12,"column_end":18},"name":"reduce","qualname":"<Array>::reduce","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, JsValue, u32, Array) -> JsValue, initial_value: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `reduce()` method applies a function against an accumulator and each element in\n the array (from left to right) to reduce it to a single value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":18026,"byte_end":18038,"line_start":352,"line_end":352,"column_start":12,"column_end":24},"name":"reduce_right","qualname":"<Array>::reduce_right","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, JsValue, u32, Array) -> JsValue, initial_value: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `reduceRight()` method applies a function against an accumulator and each value\n of the array (from right-to-left) to reduce it to a single value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":18516,"byte_end":18523,"line_start":363,"line_end":363,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Array>::reverse","value":"fn (&self) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `reverse()` method reverses an array in place. The first array\n element becomes the last, and the last array element becomes the first.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":18874,"byte_end":18879,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"shift","qualname":"<Array>::shift","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `shift()` method removes the first element from an array and returns\n that removed element. This method changes the length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":19281,"byte_end":19286,"line_start":378,"line_end":378,"column_start":12,"column_end":17},"name":"slice","qualname":"<Array>::slice","value":"fn (&self, start: u32, end: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of an array into\n a new array object selected from begin to end (end not included).\n The original array will not be modified.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":19713,"byte_end":19717,"line_start":385,"line_end":385,"column_start":12,"column_end":16},"name":"some","qualname":"<Array>::some","value":"fn (&self, predicate: &mut dyn FnMut(JsValue) -> bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `some()` method tests whether at least one element in the array passes the test implemented\n by the provided function.\n Note: This method returns false for any condition put on an empty array.\n [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":20286,"byte_end":20290,"line_start":396,"line_end":396,"column_start":12,"column_end":16},"name":"sort","qualname":"<Array>::sort","value":"fn (&self) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `sort()` method sorts the elements of an array in place and returns\n the array. The sort is not necessarily stable. The default sort\n order is according to string Unicode code points.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":20615,"byte_end":20621,"line_start":403,"line_end":403,"column_start":12,"column_end":18},"name":"splice","qualname":"<Array>::splice","value":"fn (&self, start: u32, delete_count: u32, item: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `splice()` method changes the contents of an array by removing existing elements and/or\n adding new elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":21169,"byte_end":21185,"line_start":411,"line_end":411,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Array>::to_locale_string","value":"fn (&self, locales: &JsValue, options: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string representing the elements of the array.\n The elements are converted to Strings using their toLocaleString methods and these\n Strings are separated by a locale-specific String (such as a comma “,”).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":21552,"byte_end":21561,"line_start":418,"line_end":418,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Array>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified array\n and its elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":21896,"byte_end":21903,"line_start":425,"line_end":425,"column_start":12,"column_end":19},"name":"unshift","qualname":"<Array>::unshift","value":"fn (&self, value: &JsValue) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `unshift()` method adds one or more elements to the beginning of an\n array and returns the new length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":6085,"byte_end":6100,"line_start":127,"line_end":127,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":353},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":22020,"byte_end":22029,"line_start":430,"line_end":430,"column_start":12,"column_end":21},"name":"ArrayIter","qualname":"::ArrayIter","value":"ArrayIter {  }","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":356}],"decl_id":null,"docs":" Iterator returned by `Array::iter`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":22808,"byte_end":22812,"line_start":462,"line_end":462,"column_start":12,"column_end":16},"name":"iter","qualname":"<Array>::iter","value":"fn (&self) -> ArrayIter<'_>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the values of the JS array.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":22995,"byte_end":23001,"line_start":470,"line_end":470,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<Array>::to_vec","value":"fn (&self) -> Vec<JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Converts the JS array into a new Vec.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":436},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23728,"byte_end":23739,"line_start":507,"line_end":507,"column_start":14,"column_end":25},"name":"ArrayBuffer","qualname":"::ArrayBuffer","value":"ArrayBuffer {  }","parent":null,"children":[{"krate":0,"index":437}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23605,"byte_end":23620,"line_start":503,"line_end":503,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23605,"byte_end":23620,"line_start":503,"line_end":503,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23605,"byte_end":23620,"line_start":503,"line_end":503,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":24306,"byte_end":24309,"line_start":518,"line_end":518,"column_start":12,"column_end":15},"name":"new","qualname":"<ArrayBuffer>::new","value":"fn (length: u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `ArrayBuffer` object is used to represent a generic,\n fixed-length raw binary data buffer. You cannot directly\n manipulate the contents of an `ArrayBuffer`; instead, you\n create one of the typed array objects or a `DataView` object\n which represents the buffer in a specific format, and use that\n to read and write the contents of the buffer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23605,"byte_end":23620,"line_start":503,"line_end":503,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23605,"byte_end":23620,"line_start":503,"line_end":503,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":24923,"byte_end":24934,"line_start":528,"line_end":528,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<ArrayBuffer>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength property of an object which is an instance of type ArrayBuffer\n it's an accessor property whose set accessor function is undefined,\n meaning that you can only read this property.\n The value is established when the array is constructed and cannot be changed.\n This property returns 0 if this ArrayBuffer has been detached.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23605,"byte_end":23620,"line_start":503,"line_end":503,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23605,"byte_end":23620,"line_start":503,"line_end":503,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":25335,"byte_end":25342,"line_start":535,"line_end":535,"column_start":12,"column_end":19},"name":"is_view","qualname":"<ArrayBuffer>::is_view","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `isView()` method returns true if arg is one of the `ArrayBuffer`\n views, such as typed array objects or a DataView; false otherwise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23605,"byte_end":23620,"line_start":503,"line_end":503,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23605,"byte_end":23620,"line_start":503,"line_end":503,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":25719,"byte_end":25724,"line_start":543,"line_end":543,"column_start":12,"column_end":17},"name":"slice","qualname":"<ArrayBuffer>::slice","value":"fn (&self, begin: u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a new `ArrayBuffer` whose contents\n are a copy of this `ArrayBuffer`'s bytes from begin, inclusive,\n up to end, exclusive.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23605,"byte_end":23620,"line_start":503,"line_end":503,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23605,"byte_end":23620,"line_start":503,"line_end":503,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26018,"byte_end":26032,"line_start":549,"line_end":549,"column_start":12,"column_end":26},"name":"slice_with_end","qualname":"<ArrayBuffer>::slice_with_end","value":"fn (&self, begin: u32, end: u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" Like `slice()` but with the `end` argument.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23605,"byte_end":23620,"line_start":503,"line_end":503,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23605,"byte_end":23620,"line_start":503,"line_end":503,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":519},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26223,"byte_end":26240,"line_start":557,"line_end":557,"column_start":14,"column_end":31},"name":"SharedArrayBuffer","qualname":"::SharedArrayBuffer","value":"SharedArrayBuffer {  }","parent":null,"children":[{"krate":0,"index":520}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26115,"byte_end":26130,"line_start":553,"line_end":553,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26115,"byte_end":26130,"line_start":553,"line_end":553,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26115,"byte_end":26130,"line_start":553,"line_end":553,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26740,"byte_end":26743,"line_start":567,"line_end":567,"column_start":12,"column_end":15},"name":"new","qualname":"<SharedArrayBuffer>::new","value":"fn (length: u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `SharedArrayBuffer` object is used to represent a generic,\n fixed-length raw binary data buffer, similar to the `ArrayBuffer`\n object, but in a way that they can be used to create views\n on shared memory. Unlike an `ArrayBuffer`, a `SharedArrayBuffer`\n cannot become detached.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26115,"byte_end":26130,"line_start":553,"line_end":553,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26115,"byte_end":26130,"line_start":553,"line_end":553,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":27198,"byte_end":27209,"line_start":575,"line_end":575,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<SharedArrayBuffer>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length of\n an `SharedArrayBuffer` in bytes. This is established when\n the `SharedArrayBuffer` is constructed and cannot be changed.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26115,"byte_end":26130,"line_start":553,"line_end":553,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26115,"byte_end":26130,"line_start":553,"line_end":553,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":27612,"byte_end":27617,"line_start":583,"line_end":583,"column_start":12,"column_end":17},"name":"slice","qualname":"<SharedArrayBuffer>::slice","value":"fn (&self, begin: u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a new `SharedArrayBuffer` whose contents\n are a copy of this `SharedArrayBuffer`'s bytes from begin, inclusive,\n up to end, exclusive.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26115,"byte_end":26130,"line_start":553,"line_end":553,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26115,"byte_end":26130,"line_start":553,"line_end":553,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":27929,"byte_end":27943,"line_start":589,"line_end":589,"column_start":12,"column_end":26},"name":"slice_with_end","qualname":"<SharedArrayBuffer>::slice_with_end","value":"fn (&self, begin: u32, end: u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" Like `slice()` but with the `end` argument.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26115,"byte_end":26130,"line_start":553,"line_end":553,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":26115,"byte_end":26130,"line_start":553,"line_end":553,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":28356,"byte_end":28360,"line_start":600,"line_end":600,"column_start":12,"column_end":16},"name":"keys","qualname":"<Array>::keys","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `keys()` method returns a new Array Iterator object that contains the\n keys for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":28035,"byte_end":28050,"line_start":593,"line_end":593,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":28035,"byte_end":28050,"line_start":593,"line_end":593,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":28698,"byte_end":28705,"line_start":607,"line_end":607,"column_start":12,"column_end":19},"name":"entries","qualname":"<Array>::entries","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `entries()` method returns a new Array Iterator object that contains\n the key/value pairs for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":28035,"byte_end":28050,"line_start":593,"line_end":593,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":28035,"byte_end":28050,"line_start":593,"line_end":593,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29032,"byte_end":29038,"line_start":614,"line_end":614,"column_start":12,"column_end":18},"name":"values","qualname":"<Array>::values","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `values()` method returns a new Array Iterator object that\n contains the values for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":28035,"byte_end":28050,"line_start":593,"line_end":593,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":28035,"byte_end":28050,"line_start":593,"line_end":593,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":35},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29675,"byte_end":29682,"line_start":627,"line_end":627,"column_start":9,"column_end":16},"name":"Atomics","qualname":"::Atomics","value":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560}],"decl_id":null,"docs":" The `Atomics` object provides atomic operations as static methods.\n They are used with `SharedArrayBuffer` objects.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29642,"byte_end":29666,"line_start":626,"line_end":626,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":534},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":30230,"byte_end":30233,"line_start":639,"line_end":639,"column_start":16,"column_end":19},"name":"add","qualname":"::Atomics::add","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.add()` method adds a given value at a given\n position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":30832,"byte_end":30835,"line_start":649,"line_end":649,"column_start":16,"column_end":19},"name":"and","qualname":"::Atomics::and","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.and()` method computes a bitwise AND with a given\n value at a given position in the array, and returns the old value\n at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":31588,"byte_end":31604,"line_start":660,"line_end":660,"column_start":16,"column_end":32},"name":"compare_exchange","qualname":"::Atomics::compare_exchange","value":"fn (typed_array: &JsValue, index: u32, expected_value: i32, replacement_value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.compareExchange()` method exchanges a given\n replacement value at a given position in the array, if a given expected\n value equals the old value. It returns the old value at that position\n whether it was equal to the expected value or not.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":32271,"byte_end":32279,"line_start":674,"line_end":674,"column_start":16,"column_end":24},"name":"exchange","qualname":"::Atomics::exchange","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.exchange()` method stores a given value at a given\n position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":32845,"byte_end":32857,"line_start":683,"line_end":683,"column_start":16,"column_end":28},"name":"is_lock_free","qualname":"::Atomics::is_lock_free","value":"fn (size: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.isLockFree()` method is used to determine\n whether to use locks or atomic operations. It returns true,\n if the given size is one of the `BYTES_PER_ELEMENT` property\n of integer `TypedArray` types.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":33197,"byte_end":33201,"line_start":690,"line_end":690,"column_start":16,"column_end":20},"name":"load","qualname":"::Atomics::load","value":"fn (typed_array: &JsValue, index: u32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.load()` method returns a value at a given\n position in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":33746,"byte_end":33752,"line_start":699,"line_end":699,"column_start":16,"column_end":22},"name":"notify","qualname":"::Atomics::notify","value":"fn (typed_array: &Int32Array, index: u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.notify()` method notifies up some agents that\n are sleeping in the wait queue.\n Note: This operation works with a shared `Int32Array` only.\n If `count` is not provided, notifies all the agents in the queue.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":33966,"byte_end":33983,"line_start":703,"line_end":703,"column_start":16,"column_end":33},"name":"notify_with_count","qualname":"::Atomics::notify_with_count","value":"fn (typed_array: &Int32Array, index: u32, count: u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Notifies up to `count` agents in the wait queue.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":34617,"byte_end":34619,"line_start":716,"line_end":716,"column_start":16,"column_end":18},"name":"or","qualname":"::Atomics::or","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.or()` method computes a bitwise OR with a given value\n at a given position in the array, and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":35043,"byte_end":35048,"line_start":723,"line_end":723,"column_start":16,"column_end":21},"name":"store","qualname":"::Atomics::store","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.store()` method stores a given value at the given\n position in the array and returns that value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":35617,"byte_end":35620,"line_start":732,"line_end":732,"column_start":16,"column_end":19},"name":"sub","qualname":"::Atomics::sub","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.sub()` method substracts a given value at a\n given position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":36312,"byte_end":36316,"line_start":743,"line_end":743,"column_start":16,"column_end":20},"name":"wait","qualname":"::Atomics::wait","value":"fn (typed_array: &Int32Array, index: u32, value: i32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.wait()` method verifies that a given\n position in an `Int32Array` still contains a given value\n and if so sleeps, awaiting a wakeup or a timeout.\n It returns a string which is either \"ok\", \"not-equal\", or \"timed-out\".\n Note: This operation only works with a shared `Int32Array`\n and may not be allowed on the main thread.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":36667,"byte_end":36684,"line_start":749,"line_end":749,"column_start":16,"column_end":33},"name":"wait_with_timeout","qualname":"::Atomics::wait_with_timeout","value":"fn (typed_array: &Int32Array, index: u32, value: i32, timeout: f64) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Like `wait()`, but with timeout","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":37364,"byte_end":37367,"line_start":764,"line_end":764,"column_start":16,"column_end":19},"name":"xor","qualname":"::Atomics::xor","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.xor()` method computes a bitwise XOR\n with a given value at a given position in the array,\n and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":29708,"byte_end":29723,"line_start":630,"line_end":630,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":628},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":37616,"byte_end":37623,"line_start":773,"line_end":773,"column_start":14,"column_end":21},"name":"Boolean","qualname":"::Boolean","value":"Boolean {  }","parent":null,"children":[{"krate":0,"index":629}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":37460,"byte_end":37475,"line_start":769,"line_end":769,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":37460,"byte_end":37475,"line_start":769,"line_end":769,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":37460,"byte_end":37475,"line_start":769,"line_end":769,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":37950,"byte_end":37953,"line_start":780,"line_end":780,"column_start":12,"column_end":15},"name":"new","qualname":"<Boolean>::new","value":"fn (value: &JsValue) -> Boolean","parent":null,"children":[],"decl_id":null,"docs":" The `Boolean()` constructor creates an object wrapper for a boolean value.","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `Boolean::from` instead\")","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":37872,"byte_end":37938,"line_start":779,"line_end":779,"column_start":5,"column_end":71}},{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":37460,"byte_end":37475,"line_start":769,"line_end":769,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":37460,"byte_end":37475,"line_start":769,"line_end":769,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38258,"byte_end":38266,"line_start":786,"line_end":786,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Boolean>::value_of","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of a `Boolean` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":37460,"byte_end":37475,"line_start":769,"line_end":769,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":37460,"byte_end":37475,"line_start":769,"line_end":769,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":793},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38940,"byte_end":38948,"line_start":821,"line_end":821,"column_start":14,"column_end":22},"name":"DataView","qualname":"::DataView","value":"DataView {  }","parent":null,"children":[{"krate":0,"index":794}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":39306,"byte_end":39309,"line_start":829,"line_end":829,"column_start":12,"column_end":15},"name":"new","qualname":"<DataView>::new","value":"fn (buffer: &ArrayBuffer, byteOffset: usize, byteLength: usize) -> DataView","parent":null,"children":[],"decl_id":null,"docs":" The `DataView` view provides a low-level interface for reading and\n writing multiple number types in an `ArrayBuffer` irrespective of the\n platform's endianness.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":39673,"byte_end":39679,"line_start":835,"line_end":835,"column_start":12,"column_end":18},"name":"buffer","qualname":"<DataView>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The ArrayBuffer referenced by this view. Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":40066,"byte_end":40077,"line_start":842,"line_end":842,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<DataView>::byte_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The length (in bytes) of this view from the start of its ArrayBuffer.\n Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":40458,"byte_end":40469,"line_start":849,"line_end":849,"column_start":12,"column_end":23},"name":"byte_offset","qualname":"<DataView>::byte_offset","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The offset (in bytes) of this view from the start of its ArrayBuffer.\n Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":40826,"byte_end":40834,"line_start":856,"line_end":856,"column_start":12,"column_end":20},"name":"get_int8","qualname":"<DataView>::get_int8","value":"fn (&self, byte_offset: usize) -> i8","parent":null,"children":[],"decl_id":null,"docs":" The `getInt8()` method gets a signed 8-bit integer (byte) at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":41213,"byte_end":41222,"line_start":863,"line_end":863,"column_start":12,"column_end":21},"name":"get_uint8","qualname":"<DataView>::get_uint8","value":"fn (&self, byte_offset: usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The `getUint8()` method gets a unsigned 8-bit integer (byte) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":41601,"byte_end":41610,"line_start":870,"line_end":870,"column_start":12,"column_end":21},"name":"get_int16","qualname":"<DataView>::get_int16","value":"fn (&self, byte_offset: usize) -> i16","parent":null,"children":[],"decl_id":null,"docs":" The `getInt16()` method gets a signed 16-bit integer (short) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":41990,"byte_end":42006,"line_start":877,"line_end":877,"column_start":12,"column_end":28},"name":"get_int16_endian","qualname":"<DataView>::get_int16_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> i16","parent":null,"children":[],"decl_id":null,"docs":" The `getInt16()` method gets a signed 16-bit integer (short) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":42418,"byte_end":42428,"line_start":884,"line_end":884,"column_start":12,"column_end":22},"name":"get_uint16","qualname":"<DataView>::get_uint16","value":"fn (&self, byte_offset: usize) -> u16","parent":null,"children":[],"decl_id":null,"docs":" The `getUint16()` method gets an unsigned 16-bit integer (unsigned short) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":42819,"byte_end":42836,"line_start":891,"line_end":891,"column_start":12,"column_end":29},"name":"get_uint16_endian","qualname":"<DataView>::get_uint16_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> u16","parent":null,"children":[],"decl_id":null,"docs":" The `getUint16()` method gets an unsigned 16-bit integer (unsigned short) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":43236,"byte_end":43245,"line_start":898,"line_end":898,"column_start":12,"column_end":21},"name":"get_int32","qualname":"<DataView>::get_int32","value":"fn (&self, byte_offset: usize) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `getInt32()` method gets a signed 32-bit integer (long) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":43624,"byte_end":43640,"line_start":905,"line_end":905,"column_start":12,"column_end":28},"name":"get_int32_endian","qualname":"<DataView>::get_int32_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `getInt32()` method gets a signed 32-bit integer (long) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":44051,"byte_end":44061,"line_start":912,"line_end":912,"column_start":12,"column_end":22},"name":"get_uint32","qualname":"<DataView>::get_uint32","value":"fn (&self, byte_offset: usize) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUint32()` method gets an unsigned 32-bit integer (unsigned long) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":44451,"byte_end":44468,"line_start":919,"line_end":919,"column_start":12,"column_end":29},"name":"get_uint32_endian","qualname":"<DataView>::get_uint32_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUint32()` method gets an unsigned 32-bit integer (unsigned long) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":44873,"byte_end":44884,"line_start":926,"line_end":926,"column_start":12,"column_end":23},"name":"get_float32","qualname":"<DataView>::get_float32","value":"fn (&self, byte_offset: usize) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The `getFloat32()` method gets a signed 32-bit float (float) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":45268,"byte_end":45286,"line_start":933,"line_end":933,"column_start":12,"column_end":30},"name":"get_float32_endian","qualname":"<DataView>::get_float32_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The `getFloat32()` method gets a signed 32-bit float (float) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":45692,"byte_end":45703,"line_start":940,"line_end":940,"column_start":12,"column_end":23},"name":"get_float64","qualname":"<DataView>::get_float64","value":"fn (&self, byte_offset: usize) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `getFloat64()` method gets a signed 64-bit float (double) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":46088,"byte_end":46106,"line_start":947,"line_end":947,"column_start":12,"column_end":30},"name":"get_float64_endian","qualname":"<DataView>::get_float64_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `getFloat64()` method gets a signed 64-bit float (double) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":46510,"byte_end":46518,"line_start":954,"line_end":954,"column_start":12,"column_end":20},"name":"set_int8","qualname":"<DataView>::set_int8","value":"fn (&self, byte_offset: usize, value: i8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setInt8()` method stores a signed 8-bit integer (byte) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":46911,"byte_end":46920,"line_start":961,"line_end":961,"column_start":12,"column_end":21},"name":"set_uint8","qualname":"<DataView>::set_uint8","value":"fn (&self, byte_offset: usize, value: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setUint8()` method stores an unsigned 8-bit integer (byte) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":47312,"byte_end":47321,"line_start":968,"line_end":968,"column_start":12,"column_end":21},"name":"set_int16","qualname":"<DataView>::set_int16","value":"fn (&self, byte_offset: usize, value: i16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setInt16()` method stores a signed 16-bit integer (short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":47714,"byte_end":47730,"line_start":975,"line_end":975,"column_start":12,"column_end":28},"name":"set_int16_endian","qualname":"<DataView>::set_int16_endian","value":"fn (&self, byte_offset: usize, value: i16, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setInt16()` method stores a signed 16-bit integer (short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":48159,"byte_end":48169,"line_start":982,"line_end":982,"column_start":12,"column_end":22},"name":"set_uint16","qualname":"<DataView>::set_uint16","value":"fn (&self, byte_offset: usize, value: u16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setUint16()` method stores an unsigned 16-bit integer (unsigned short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":48577,"byte_end":48594,"line_start":989,"line_end":989,"column_start":12,"column_end":29},"name":"set_uint16_endian","qualname":"<DataView>::set_uint16_endian","value":"fn (&self, byte_offset: usize, value: u16, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setUint16()` method stores an unsigned 16-bit integer (unsigned short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":49007,"byte_end":49016,"line_start":996,"line_end":996,"column_start":12,"column_end":21},"name":"set_int32","qualname":"<DataView>::set_int32","value":"fn (&self, byte_offset: usize, value: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setInt32()` method stores a signed 32-bit integer (long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":49408,"byte_end":49424,"line_start":1003,"line_end":1003,"column_start":12,"column_end":28},"name":"set_int32_endian","qualname":"<DataView>::set_int32_endian","value":"fn (&self, byte_offset: usize, value: i32, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setInt32()` method stores a signed 32-bit integer (long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":49852,"byte_end":49862,"line_start":1010,"line_end":1010,"column_start":12,"column_end":22},"name":"set_uint32","qualname":"<DataView>::set_uint32","value":"fn (&self, byte_offset: usize, value: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setUint32()` method stores an unsigned 32-bit integer (unsigned long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":50269,"byte_end":50286,"line_start":1017,"line_end":1017,"column_start":12,"column_end":29},"name":"set_uint32_endian","qualname":"<DataView>::set_uint32_endian","value":"fn (&self, byte_offset: usize, value: u32, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setUint32()` method stores an unsigned 32-bit integer (unsigned long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":50704,"byte_end":50715,"line_start":1024,"line_end":1024,"column_start":12,"column_end":23},"name":"set_float32","qualname":"<DataView>::set_float32","value":"fn (&self, byte_offset: usize, value: f32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setFloat32()` method stores a signed 32-bit float (float) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":51112,"byte_end":51130,"line_start":1031,"line_end":1031,"column_start":12,"column_end":30},"name":"set_float32_endian","qualname":"<DataView>::set_float32_endian","value":"fn (&self, byte_offset: usize, value: f32, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setFloat32()` method stores a signed 32-bit float (float) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":51549,"byte_end":51560,"line_start":1038,"line_end":1038,"column_start":12,"column_end":23},"name":"set_float64","qualname":"<DataView>::set_float64","value":"fn (&self, byte_offset: usize, value: f64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setFloat64()` method stores a signed 64-bit float (double) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":51958,"byte_end":51976,"line_start":1045,"line_end":1045,"column_start":12,"column_end":30},"name":"set_float64_endian","qualname":"<DataView>::set_float64_endian","value":"fn (&self, byte_offset: usize, value: f64, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setFloat64()` method stores a signed 64-bit float (double) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38817,"byte_end":38832,"line_start":817,"line_end":817,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":882},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52183,"byte_end":52188,"line_start":1053,"line_end":1053,"column_start":14,"column_end":19},"name":"Error","qualname":"::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":883}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52628,"byte_end":52631,"line_start":1062,"line_end":1062,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"fn (message: &str) -> Error","parent":null,"children":[],"decl_id":null,"docs":" The Error constructor creates an error object.\n Instances of Error objects are thrown when runtime errors occur.\n The Error object can also be used as a base object for user-defined exceptions.\n See below for standard built-in error types.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52924,"byte_end":52931,"line_start":1068,"line_end":1068,"column_start":12,"column_end":19},"name":"message","qualname":"<Error>::message","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The message property is a human-readable description of the error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":53018,"byte_end":53029,"line_start":1070,"line_end":1070,"column_start":12,"column_end":23},"name":"set_message","qualname":"<Error>::set_message","value":"fn (&self, message: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":53346,"byte_end":53350,"line_start":1076,"line_end":1076,"column_start":12,"column_end":16},"name":"name","qualname":"<Error>::name","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The name property represents a name for the type of error. The initial value is \"Error\".","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":53437,"byte_end":53445,"line_start":1078,"line_end":1078,"column_start":12,"column_end":20},"name":"set_name","qualname":"<Error>::set_name","value":"fn (&self, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":53755,"byte_end":53764,"line_start":1084,"line_end":1084,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Error>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified Error object","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":52060,"byte_end":52075,"line_start":1049,"line_end":1049,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":962},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":53948,"byte_end":53957,"line_start":1092,"line_end":1092,"column_start":14,"column_end":23},"name":"EvalError","qualname":"::EvalError","value":"EvalError {  }","parent":null,"children":[{"krate":0,"index":963}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":53808,"byte_end":53823,"line_start":1088,"line_end":1088,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":53808,"byte_end":53823,"line_start":1088,"line_end":1088,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":53808,"byte_end":53823,"line_start":1088,"line_end":1088,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54342,"byte_end":54345,"line_start":1100,"line_end":1100,"column_start":12,"column_end":15},"name":"new","qualname":"<EvalError>::new","value":"fn (message: &str) -> EvalError","parent":null,"children":[],"decl_id":null,"docs":" The EvalError object indicates an error regarding the global eval() function. This\n exception is not thrown by JavaScript anymore, however the EvalError object remains for\n compatibility.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":53808,"byte_end":53823,"line_start":1088,"line_end":1088,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":53808,"byte_end":53823,"line_start":1088,"line_end":1088,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1079},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54548,"byte_end":54556,"line_start":1108,"line_end":1108,"column_start":14,"column_end":22},"name":"Function","qualname":"::Function","value":"Function {  }","parent":null,"children":[{"krate":0,"index":1080}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":55189,"byte_end":55202,"line_start":1119,"line_end":1119,"column_start":12,"column_end":25},"name":"new_with_args","qualname":"<Function>::new_with_args","value":"fn (args: &str, body: &str) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `Function` constructor creates a new `Function` object. Calling the\n constructor directly can create functions dynamically, but suffers from\n security and similar (but far less significant) performance issues\n similar to `eval`. However, unlike `eval`, the `Function` constructor\n allows executing code in the global scope, prompting better programming\n habits and allowing for more efficient code minification.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":55871,"byte_end":55882,"line_start":1130,"line_end":1130,"column_start":12,"column_end":23},"name":"new_no_args","qualname":"<Function>::new_no_args","value":"fn (body: &str) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `Function` constructor creates a new `Function` object. Calling the\n constructor directly can create functions dynamically, but suffers from\n security and similar (but far less significant) performance issues\n similar to `eval`. However, unlike `eval`, the `Function` constructor\n allows executing code in the global scope, prompting better programming\n habits and allowing for more efficient code minification.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":56229,"byte_end":56234,"line_start":1137,"line_end":1137,"column_start":12,"column_end":17},"name":"apply","qualname":"<Function>::apply","value":"fn (&self, context: &JsValue, args: &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `apply()` method calls a function with a given this value, and arguments provided as an array\n (or an array-like object).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":56623,"byte_end":56628,"line_start":1144,"line_end":1144,"column_start":12,"column_end":17},"name":"call0","qualname":"<Function>::call0","value":"fn (&self, context: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":57003,"byte_end":57008,"line_start":1151,"line_end":1151,"column_start":12,"column_end":17},"name":"call1","qualname":"<Function>::call1","value":"fn (&self, context: &JsValue, arg1: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":57399,"byte_end":57404,"line_start":1158,"line_end":1158,"column_start":12,"column_end":17},"name":"call2","qualname":"<Function>::call2","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":57850,"byte_end":57855,"line_start":1170,"line_end":1170,"column_start":12,"column_end":17},"name":"call3","qualname":"<Function>::call3","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue, arg3: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":58421,"byte_end":58425,"line_start":1183,"line_end":1183,"column_start":12,"column_end":16},"name":"bind","qualname":"<Function>::bind","value":"fn (&self, context: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":58880,"byte_end":58885,"line_start":1190,"line_end":1190,"column_start":12,"column_end":17},"name":"bind0","qualname":"<Function>::bind0","value":"fn (&self, context: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":59340,"byte_end":59345,"line_start":1197,"line_end":1197,"column_start":12,"column_end":17},"name":"bind1","qualname":"<Function>::bind1","value":"fn (&self, context: &JsValue, arg1: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":59816,"byte_end":59821,"line_start":1204,"line_end":1204,"column_start":12,"column_end":17},"name":"bind2","qualname":"<Function>::bind2","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":60308,"byte_end":60313,"line_start":1211,"line_end":1211,"column_start":12,"column_end":17},"name":"bind3","qualname":"<Function>::bind3","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue, arg3: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":60740,"byte_end":60746,"line_start":1223,"line_end":1223,"column_start":12,"column_end":18},"name":"length","qualname":"<Function>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property indicates the number of arguments expected by the function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61145,"byte_end":61149,"line_start":1231,"line_end":1231,"column_start":12,"column_end":16},"name":"name","qualname":"<Function>::name","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" A Function object's read-only name property indicates the function's\n name as specified when it was created or \"anonymous\" for functions\n created anonymously.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61471,"byte_end":61480,"line_start":1237,"line_end":1237,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Function>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the source code of the function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":54390,"byte_end":54405,"line_start":1104,"line_end":1104,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61825,"byte_end":61833,"line_start":1247,"line_end":1247,"column_start":12,"column_end":20},"name":"try_from","qualname":"<Function>::try_from","value":"fn (val: &JsValue) -> Option<&Function>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Function` value of this JS value if it's an instance of a\n function.","sig":null,"attributes":[{"value":"deprecated(note =\n             \"recommended to use dyn_ref instead which is now equivalent\")","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61731,"byte_end":61813,"line_start":1246,"line_end":1246,"column_start":5,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":1159},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":62039,"byte_end":62048,"line_start":1257,"line_end":1257,"column_start":14,"column_end":23},"name":"Generator","qualname":"::Generator","value":"Generator {  }","parent":null,"children":[{"krate":0,"index":1160}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61916,"byte_end":61931,"line_start":1253,"line_end":1253,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61916,"byte_end":61931,"line_start":1253,"line_end":1253,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61916,"byte_end":61931,"line_start":1253,"line_end":1253,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":62418,"byte_end":62422,"line_start":1264,"line_end":1264,"column_start":12,"column_end":16},"name":"next","qualname":"<Generator>::next","value":"fn (&self, value: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `next()` method returns an object with two properties done and value.\n You can also provide a parameter to the next method to send a value to the generator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61916,"byte_end":61931,"line_start":1253,"line_end":1253,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61916,"byte_end":61931,"line_start":1253,"line_end":1253,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":62774,"byte_end":62781,"line_start":1270,"line_end":1270,"column_start":12,"column_end":19},"name":"return_","qualname":"<Generator>::return_","value":"fn (&self, value: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `return()` method returns the given value and finishes the generator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61916,"byte_end":61931,"line_start":1253,"line_end":1253,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61916,"byte_end":61931,"line_start":1253,"line_end":1253,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63183,"byte_end":63188,"line_start":1277,"line_end":1277,"column_start":12,"column_end":17},"name":"throw","qualname":"<Generator>::throw","value":"fn (&self, error: &Error) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `throw()` method resumes the execution of a generator by throwing an error into it\n and returns an object with two properties done and value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61916,"byte_end":61931,"line_start":1253,"line_end":1253,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61916,"byte_end":61931,"line_start":1253,"line_end":1253,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1254},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63384,"byte_end":63387,"line_start":1285,"line_end":1285,"column_start":14,"column_end":17},"name":"Map","qualname":"::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":1255}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63626,"byte_end":63631,"line_start":1291,"line_end":1291,"column_start":12,"column_end":17},"name":"clear","qualname":"<Map>::clear","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `clear()` method removes all elements from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63893,"byte_end":63899,"line_start":1297,"line_end":1297,"column_start":12,"column_end":18},"name":"delete","qualname":"<Map>::delete","value":"fn (&self, key: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":64261,"byte_end":64269,"line_start":1304,"line_end":1304,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Map>::for_each","value":"fn (&self, callback: &mut dyn FnMut(JsValue, JsValue)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per each\n key/value pair in the Map object, in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":64567,"byte_end":64570,"line_start":1310,"line_end":1310,"column_start":12,"column_end":15},"name":"get","qualname":"<Map>::get","value":"fn (&self, key: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `get()` method returns a specified element from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":64897,"byte_end":64900,"line_start":1317,"line_end":1317,"column_start":12,"column_end":15},"name":"has","qualname":"<Map>::has","value":"fn (&self, key: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an element with\n the specified key exists or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":65243,"byte_end":65246,"line_start":1324,"line_end":1324,"column_start":12,"column_end":15},"name":"new","qualname":"<Map>::new","value":"fn () -> Map","parent":null,"children":[],"decl_id":null,"docs":" The Map object holds key-value pairs. Any value (both objects and\n primitive values) maybe used as either a key or a value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":65533,"byte_end":65536,"line_start":1331,"line_end":1331,"column_start":12,"column_end":15},"name":"set","qualname":"<Map>::set","value":"fn (&self, key: &JsValue, value: &JsValue) -> Map","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method adds or updates an element with a specified key\n and value to a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":65963,"byte_end":65967,"line_start":1339,"line_end":1339,"column_start":12,"column_end":16},"name":"size","qualname":"<Map>::size","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The value of size is an integer representing how many entries\n the Map object has. A set accessor function for size is undefined;\n you can not change this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":63261,"byte_end":63276,"line_start":1281,"line_end":1281,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":66374,"byte_end":66381,"line_start":1351,"line_end":1351,"column_start":12,"column_end":19},"name":"entries","qualname":"<Map>::entries","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `entries()` method returns a new Iterator object that contains\n the [key, value] pairs for each element in the Map object in\n insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":66007,"byte_end":66022,"line_start":1343,"line_end":1343,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":66007,"byte_end":66022,"line_start":1343,"line_end":1343,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1271},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":66718,"byte_end":66722,"line_start":1358,"line_end":1358,"column_start":12,"column_end":16},"name":"keys","qualname":"<Map>::keys","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `keys()` method returns a new Iterator object that contains the\n keys for each element in the Map object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":66007,"byte_end":66022,"line_start":1343,"line_end":1343,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":66007,"byte_end":66022,"line_start":1343,"line_end":1343,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":67065,"byte_end":67071,"line_start":1365,"line_end":1365,"column_start":12,"column_end":18},"name":"values","qualname":"<Map>::values","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `values()` method returns a new Iterator object that contains the\n values for each element in the Map object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":66007,"byte_end":66022,"line_start":1343,"line_end":1343,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":66007,"byte_end":66022,"line_start":1343,"line_end":1343,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1332},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":67504,"byte_end":67512,"line_start":1377,"line_end":1377,"column_start":14,"column_end":22},"name":"Iterator","qualname":"::Iterator","value":"Iterator {  }","parent":null,"children":[{"krate":0,"index":1333}],"decl_id":null,"docs":" Any object that conforms to the JS iterator protocol. For example,\n something returned by `myArray[Symbol.iterator]()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":67112,"byte_end":67127,"line_start":1369,"line_end":1369,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":67112,"byte_end":67127,"line_start":1369,"line_end":1369,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":67112,"byte_end":67127,"line_start":1369,"line_end":1369,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":67852,"byte_end":67856,"line_start":1384,"line_end":1384,"column_start":12,"column_end":16},"name":"next","qualname":"<Iterator>::next","value":"fn (&self) -> Result<IteratorNext, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `next()` method always has to return an object with appropriate\n properties including done and value. If a non-object value gets returned\n (such as false or undefined), a TypeError (\"iterator.next() returned a\n non-object value\") will be thrown.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":67112,"byte_end":67127,"line_start":1369,"line_end":1369,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":67112,"byte_end":67127,"line_start":1369,"line_end":1369,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1451},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":68755,"byte_end":68768,"line_start":1416,"line_end":1416,"column_start":14,"column_end":27},"name":"AsyncIterator","qualname":"::AsyncIterator","value":"AsyncIterator {  }","parent":null,"children":[{"krate":0,"index":1452}],"decl_id":null,"docs":" Any object that conforms to the JS async iterator protocol. For example,\n something returned by `myObject[Symbol.asyncIterator]()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":68345,"byte_end":68360,"line_start":1408,"line_end":1408,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":68345,"byte_end":68360,"line_start":1408,"line_end":1408,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":68345,"byte_end":68360,"line_start":1408,"line_end":1408,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1449},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":69136,"byte_end":69140,"line_start":1423,"line_end":1423,"column_start":12,"column_end":16},"name":"next","qualname":"<AsyncIterator>::next","value":"fn (&self) -> Result<Promise, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `next()` method always has to return a Promise which resolves to an object\n with appropriate properties including done and value. If a non-object value\n gets returned (such as false or undefined), a TypeError (\"iterator.next()\n returned a non-object value\") will be thrown.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":68345,"byte_end":68360,"line_start":1408,"line_end":1408,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":68345,"byte_end":68360,"line_start":1408,"line_end":1408,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":49},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":69356,"byte_end":69360,"line_start":1429,"line_end":1429,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52}],"decl_id":null,"docs":" An iterator over the JS `Symbol.iterator` iteration protocol.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":53},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":69574,"byte_end":69582,"line_start":1437,"line_end":1437,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55}],"decl_id":null,"docs":" An iterator over the JS `Symbol.iterator` iteration protocol.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":77},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":71147,"byte_end":71155,"line_start":1513,"line_end":1513,"column_start":8,"column_end":16},"name":"try_iter","qualname":"::try_iter","value":"fn (val: &JsValue) -> Result<Option<IntoIter>, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over `val` using the JS iteration protocol and\n `Symbol.iterator`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1521},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":71915,"byte_end":71927,"line_start":1538,"line_end":1538,"column_start":14,"column_end":26},"name":"IteratorNext","qualname":"::IteratorNext","value":"IteratorNext {  }","parent":null,"children":[{"krate":0,"index":1522}],"decl_id":null,"docs":" The result of calling `next()` on a JS iterator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":71612,"byte_end":71627,"line_start":1531,"line_end":1531,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":71612,"byte_end":71627,"line_start":1531,"line_end":1531,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":71612,"byte_end":71627,"line_start":1531,"line_end":1531,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72355,"byte_end":72359,"line_start":1548,"line_end":1548,"column_start":12,"column_end":16},"name":"done","qualname":"<IteratorNext>::done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Has the value `true` if the iterator is past the end of the iterated\n sequence. In this case value optionally specifies the return value of\n the iterator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":71612,"byte_end":71627,"line_start":1531,"line_end":1531,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":71612,"byte_end":71627,"line_start":1531,"line_end":1531,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72547,"byte_end":72552,"line_start":1553,"line_end":1553,"column_start":12,"column_end":17},"name":"value","qualname":"<IteratorNext>::value","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" Any JavaScript value returned by the iterator. Can be omitted when done\n is true.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":71612,"byte_end":71627,"line_start":1531,"line_end":1531,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":71612,"byte_end":71627,"line_start":1531,"line_end":1531,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":78},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72622,"byte_end":72626,"line_start":1557,"line_end":1557,"column_start":9,"column_end":13},"name":"Math","qualname":"::Math","value":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1540},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1546},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1568},{"krate":0,"index":1570},{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1576},{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1592},{"krate":0,"index":1594},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1602}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72589,"byte_end":72613,"line_start":1556,"line_end":1556,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1534},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":73008,"byte_end":73011,"line_start":1568,"line_end":1568,"column_start":16,"column_end":19},"name":"abs","qualname":"::Math::abs","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.abs()` function returns the absolute value of a number, that is\n Math.abs(x) = |x|","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1536},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":73426,"byte_end":73430,"line_start":1576,"line_end":1576,"column_start":16,"column_end":20},"name":"acos","qualname":"::Math::acos","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.acos()` function returns the arccosine (in radians) of a\n number, that is ∀x∊[-1;1]\n Math.acos(x) = arccos(x) = the unique y∊[0;π] such that cos(y)=x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1538},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":73844,"byte_end":73849,"line_start":1584,"line_end":1584,"column_start":16,"column_end":21},"name":"acosh","qualname":"::Math::acosh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.acosh()` function returns the hyperbolic arc-cosine of a\n number, that is ∀x ≥ 1\n Math.acosh(x) = arcosh(x) = the unique y ≥ 0 such that cosh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1540},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":74270,"byte_end":74274,"line_start":1592,"line_end":1592,"column_start":16,"column_end":20},"name":"asin","qualname":"::Math::asin","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.asin()` function returns the arcsine (in radians) of a\n number, that is ∀x ∊ [-1;1]\n Math.asin(x) = arcsin(x) = the unique y∊[-π2;π2] such that sin(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1542},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":74656,"byte_end":74661,"line_start":1599,"line_end":1599,"column_start":16,"column_end":21},"name":"asinh","qualname":"::Math::asinh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.asinh()` function returns the hyperbolic arcsine of a\n number, that is Math.asinh(x) = arsinh(x) = the unique y such that sinh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1544},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":74934,"byte_end":74938,"line_start":1605,"line_end":1605,"column_start":16,"column_end":20},"name":"atan","qualname":"::Math::atan","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.atan()` function returns the arctangent (in radians) of a\n number, that is Math.atan(x) = arctan(x) = the unique y ∊ [-π2;π2]such that\n tan(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1546},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":75262,"byte_end":75267,"line_start":1612,"line_end":1612,"column_start":16,"column_end":21},"name":"atan2","qualname":"::Math::atan2","value":"fn (y: f64, x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.atan2()` function returns the arctangent of the quotient of\n its arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1548},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":75690,"byte_end":75695,"line_start":1620,"line_end":1620,"column_start":16,"column_end":21},"name":"atanh","qualname":"::Math::atanh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.atanh()` function returns the hyperbolic arctangent of a number,\n that is ∀x ∊ (-1,1), Math.atanh(x) = arctanh(x) = the unique y such that\n tanh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1550},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":76056,"byte_end":76060,"line_start":1627,"line_end":1627,"column_start":16,"column_end":20},"name":"cbrt","qualname":"::Math::cbrt","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.cbrt() `function returns the cube root of a number, that is\n Math.cbrt(x) = ∛x = the unique y such that y^3 = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1552},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":76395,"byte_end":76399,"line_start":1634,"line_end":1634,"column_start":16,"column_end":20},"name":"ceil","qualname":"::Math::ceil","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.ceil()` function returns the smallest integer greater than\n or equal to a given number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1554},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":76755,"byte_end":76760,"line_start":1641,"line_end":1641,"column_start":16,"column_end":21},"name":"clz32","qualname":"::Math::clz32","value":"fn (x: i32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `Math.clz32()` function returns the number of leading zero bits in\n the 32-bit binary representation of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1556},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":77160,"byte_end":77163,"line_start":1648,"line_end":1648,"column_start":16,"column_end":19},"name":"cos","qualname":"::Math::cos","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.cos()` static function returns the cosine of the specified angle,\n which must be specified in radians. This value is length(adjacent)/length(hypotenuse).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1558},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":77515,"byte_end":77519,"line_start":1655,"line_end":1655,"column_start":16,"column_end":20},"name":"cosh","qualname":"::Math::cosh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.cosh()` function returns the hyperbolic cosine of a number,\n that can be expressed using the constant e.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1560},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":77915,"byte_end":77918,"line_start":1662,"line_end":1662,"column_start":16,"column_end":19},"name":"exp","qualname":"::Math::exp","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.exp()` function returns e^x, where x is the argument, and e is Euler's number\n (also known as Napier's constant), the base of the natural logarithms.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1562},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":78269,"byte_end":78274,"line_start":1669,"line_end":1669,"column_start":16,"column_end":21},"name":"expm1","qualname":"::Math::expm1","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.expm1()` function returns e^x - 1, where x is the argument, and e the base of the\n natural logarithms.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1564},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":78607,"byte_end":78612,"line_start":1676,"line_end":1676,"column_start":16,"column_end":21},"name":"floor","qualname":"::Math::floor","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.floor()` function returns the largest integer less than or\n equal to a given number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1566},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":78959,"byte_end":78965,"line_start":1683,"line_end":1683,"column_start":16,"column_end":22},"name":"fround","qualname":"::Math::fround","value":"fn (x: f64) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The `Math.fround()` function returns the nearest 32-bit single precision float representation\n of a Number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1568},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":79284,"byte_end":79289,"line_start":1689,"line_end":1689,"column_start":16,"column_end":21},"name":"hypot","qualname":"::Math::hypot","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.hypot()` function returns the square root of the sum of squares of its arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1570},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":79640,"byte_end":79644,"line_start":1696,"line_end":1696,"column_start":16,"column_end":20},"name":"imul","qualname":"::Math::imul","value":"fn (x: i32, y: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `Math.imul()` function returns the result of the C-like 32-bit multiplication of the\n two parameters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1572},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":80043,"byte_end":80046,"line_start":1703,"line_end":1703,"column_start":16,"column_end":19},"name":"log","qualname":"::Math::log","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.log()` function returns the natural logarithm (base e) of a number.\n The JavaScript `Math.log()` function is equivalent to ln(x) in mathematics.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1574},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":80344,"byte_end":80349,"line_start":1709,"line_end":1709,"column_start":16,"column_end":21},"name":"log10","qualname":"::Math::log10","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.log10()` function returns the base 10 logarithm of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1576},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":80648,"byte_end":80653,"line_start":1714,"line_end":1714,"column_start":16,"column_end":21},"name":"log1p","qualname":"::Math::log1p","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.log1p()` function returns the natural logarithm (base e) of 1 + a number.\n [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1578},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":80948,"byte_end":80952,"line_start":1720,"line_end":1720,"column_start":16,"column_end":20},"name":"log2","qualname":"::Math::log2","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.log2()` function returns the base 2 logarithm of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1580},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":81239,"byte_end":81242,"line_start":1726,"line_end":1726,"column_start":16,"column_end":19},"name":"max","qualname":"::Math::max","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.max()` function returns the largest of two numbers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1582},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":81557,"byte_end":81560,"line_start":1732,"line_end":1732,"column_start":16,"column_end":19},"name":"min","qualname":"::Math::min","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The static function `Math.min()` returns the lowest-valued number passed into it.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1584},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":81883,"byte_end":81886,"line_start":1738,"line_end":1738,"column_start":16,"column_end":19},"name":"pow","qualname":"::Math::pow","value":"fn (base: f64, exponent: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.pow()` function returns the base to the exponent power, that is, base^exponent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1586},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":82540,"byte_end":82546,"line_start":1748,"line_end":1748,"column_start":16,"column_end":22},"name":"random","qualname":"::Math::random","value":"fn () -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.random()` function returns a floating-point, pseudo-random number\n in the range 0–1 (inclusive of 0, but not 1) with approximately uniform distribution\n over that range — which you can then scale to your desired range.\n The implementation selects the initial seed to the random number generation algorithm;\n it cannot be chosen or reset by the user.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1588},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":82857,"byte_end":82862,"line_start":1754,"line_end":1754,"column_start":16,"column_end":21},"name":"round","qualname":"::Math::round","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.round()` function returns the value of a number rounded to the nearest integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1590},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":83218,"byte_end":83222,"line_start":1761,"line_end":1761,"column_start":16,"column_end":20},"name":"sign","qualname":"::Math::sign","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.sign()` function returns the sign of a number, indicating whether the number is\n positive, negative or zero.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1592},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":83503,"byte_end":83506,"line_start":1767,"line_end":1767,"column_start":16,"column_end":19},"name":"sin","qualname":"::Math::sin","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.sin()` function returns the sine of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1594},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":83886,"byte_end":83890,"line_start":1774,"line_end":1774,"column_start":16,"column_end":20},"name":"sinh","qualname":"::Math::sinh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.sinh()` function returns the hyperbolic sine of a number, that can be expressed\n using the constant e: Math.sinh(x) = (e^x - e^-x)/2","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1596},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":84271,"byte_end":84275,"line_start":1781,"line_end":1781,"column_start":16,"column_end":20},"name":"sqrt","qualname":"::Math::sqrt","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.sqrt()` function returns the square root of a number, that is\n ∀x ≥ 0, Math.sqrt(x) = √x = the unique y ≥ 0 such that y^2 = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1598},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":84559,"byte_end":84562,"line_start":1787,"line_end":1787,"column_start":16,"column_end":19},"name":"tan","qualname":"::Math::tan","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.tan()` function returns the tangent of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1600},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":84956,"byte_end":84960,"line_start":1794,"line_end":1794,"column_start":16,"column_end":20},"name":"tanh","qualname":"::Math::tanh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.tanh()` function returns the hyperbolic tangent of a number, that is\n tanh x = sinh x / cosh x = (e^x - e^-x)/(e^x + e^-x) = (e^2x - 1)/(e^2x + 1)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1602},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85299,"byte_end":85304,"line_start":1801,"line_end":1801,"column_start":16,"column_end":21},"name":"trunc","qualname":"::Math::trunc","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.trunc()` function returns the integer part of a number by removing any fractional\n digits.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":72664,"byte_end":72679,"line_start":1561,"line_end":1561,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1703},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85481,"byte_end":85487,"line_start":1810,"line_end":1810,"column_start":14,"column_end":20},"name":"Number","qualname":"::Number","value":"Number {  }","parent":null,"children":[{"krate":0,"index":1704}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1665},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85797,"byte_end":85806,"line_start":1816,"line_end":1816,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Number>::is_finite","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Number.isFinite()` method determines whether the passed value is a finite number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1668},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":86139,"byte_end":86149,"line_start":1822,"line_end":1822,"column_start":12,"column_end":22},"name":"is_integer","qualname":"<Number>::is_integer","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Number.isInteger()` method determines whether the passed value is an integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1671},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":86557,"byte_end":86563,"line_start":1829,"line_end":1829,"column_start":12,"column_end":18},"name":"is_nan","qualname":"<Number>::is_nan","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Number.isNaN()` method determines whether the passed value is `NaN` and its type is Number.\n It is a more robust version of the original, global isNaN().","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1674},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":86939,"byte_end":86954,"line_start":1836,"line_end":1836,"column_start":12,"column_end":27},"name":"is_safe_integer","qualname":"<Number>::is_safe_integer","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Number.isSafeInteger()` method determines whether the provided value is a number\n that is a safe integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1677},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":87403,"byte_end":87406,"line_start":1845,"line_end":1845,"column_start":12,"column_end":15},"name":"new","qualname":"<Number>::new","value":"fn (value: &JsValue) -> Number","parent":null,"children":[],"decl_id":null,"docs":" The `Number` JavaScript object is a wrapper object allowing\n you to work with numerical values. A `Number` object is\n created using the `Number()` constructor.","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `Number::from` instead\")","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":87326,"byte_end":87391,"line_start":1844,"line_end":1844,"column_start":5,"column_end":70}},{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":87775,"byte_end":87784,"line_start":1852,"line_end":1852,"column_start":12,"column_end":21},"name":"parse_int","qualname":"<Number>::parse_int","value":"fn (text: &str, radix: u8) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Number.parseInt()` method parses a string argument and returns an\n integer of the specified radix or base.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":88144,"byte_end":88155,"line_start":1859,"line_end":1859,"column_start":12,"column_end":23},"name":"parse_float","qualname":"<Number>::parse_float","value":"fn (text: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Number.parseFloat()` method parses a string argument and returns a\n floating point number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":88502,"byte_end":88518,"line_start":1866,"line_end":1866,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Number>::to_locale_string","value":"fn (&self, locale: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string with a language sensitive\n representation of this number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1689},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":88887,"byte_end":88899,"line_start":1873,"line_end":1873,"column_start":12,"column_end":24},"name":"to_precision","qualname":"<Number>::to_precision","value":"fn (&self, precision: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `toPrecision()` method returns a string representing the Number\n object to the specified precision.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":89274,"byte_end":89282,"line_start":1880,"line_end":1880,"column_start":12,"column_end":20},"name":"to_fixed","qualname":"<Number>::to_fixed","value":"fn (&self, digits: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `toFixed()` method returns a string representing the Number\n object using fixed-point notation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":89669,"byte_end":89683,"line_start":1887,"line_end":1887,"column_start":12,"column_end":26},"name":"to_exponential","qualname":"<Number>::to_exponential","value":"fn (&self, fraction_digits: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `toExponential()` method returns a string representing the Number\n object in exponential notation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1698},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":90050,"byte_end":90059,"line_start":1894,"line_end":1894,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Number>::to_string","value":"fn (&self, radix: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the\n specified Number object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1701},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":90403,"byte_end":90411,"line_start":1901,"line_end":1901,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Number>::value_of","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the wrapped primitive value of\n a Number object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":85341,"byte_end":85356,"line_start":1806,"line_end":1806,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1971},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91278,"byte_end":91282,"line_start":1941,"line_end":1941,"column_start":14,"column_end":18},"name":"Date","qualname":"::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1972}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91590,"byte_end":91598,"line_start":1948,"line_end":1948,"column_start":12,"column_end":20},"name":"get_date","qualname":"<Date>::get_date","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getDate()` method returns the day of the month for the\n specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1801},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91989,"byte_end":91996,"line_start":1955,"line_end":1955,"column_start":12,"column_end":19},"name":"get_day","qualname":"<Date>::get_day","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getDay()` method returns the day of the week for the specified date according to local time,\n where 0 represents Sunday. For the day of the month see getDate().","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":92315,"byte_end":92328,"line_start":1961,"line_end":1961,"column_start":12,"column_end":25},"name":"get_full_year","qualname":"<Date>::get_full_year","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getFullYear()` method returns the year of the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1807},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":92640,"byte_end":92649,"line_start":1967,"line_end":1967,"column_start":12,"column_end":21},"name":"get_hours","qualname":"<Date>::get_hours","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getHours()` method returns the hour for the specified date, according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1810},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":92988,"byte_end":93004,"line_start":1973,"line_end":1973,"column_start":12,"column_end":28},"name":"get_milliseconds","qualname":"<Date>::get_milliseconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getMilliseconds()` method returns the milliseconds in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1813},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":93323,"byte_end":93334,"line_start":1979,"line_end":1979,"column_start":12,"column_end":23},"name":"get_minutes","qualname":"<Date>::get_minutes","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getMinutes()` method returns the minutes in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":93727,"byte_end":93736,"line_start":1986,"line_end":1986,"column_start":12,"column_end":21},"name":"get_month","qualname":"<Date>::get_month","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getMonth()` method returns the month in the specified date according to local time,\n as a zero-based value (where zero indicates the first month of the year).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1819},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":94055,"byte_end":94066,"line_start":1992,"line_end":1992,"column_start":12,"column_end":23},"name":"get_seconds","qualname":"<Date>::get_seconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getSeconds()` method returns the seconds in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1822},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":94421,"byte_end":94429,"line_start":1999,"line_end":1999,"column_start":12,"column_end":20},"name":"get_time","qualname":"<Date>::get_time","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `getTime()` method returns the numeric value corresponding to the time for the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1825},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":94807,"byte_end":94826,"line_start":2006,"line_end":2006,"column_start":12,"column_end":31},"name":"get_timezone_offset","qualname":"<Date>::get_timezone_offset","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `getTimezoneOffset()` method returns the time zone difference, in minutes,\n from current locale (host system settings) to UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":95173,"byte_end":95185,"line_start":2013,"line_end":2013,"column_start":12,"column_end":24},"name":"get_utc_date","qualname":"<Date>::get_utc_date","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCDate()` method returns the day (date) of the month in the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1831},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":95548,"byte_end":95559,"line_start":2020,"line_end":2020,"column_start":12,"column_end":23},"name":"get_utc_day","qualname":"<Date>::get_utc_day","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCDay()` method returns the day of the week in the specified date according to universal time,\n where 0 represents Sunday.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1834},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":95891,"byte_end":95908,"line_start":2026,"line_end":2026,"column_start":12,"column_end":29},"name":"get_utc_full_year","qualname":"<Date>::get_utc_full_year","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCFullYear()` method returns the year in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1837},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":96232,"byte_end":96245,"line_start":2032,"line_end":2032,"column_start":12,"column_end":25},"name":"get_utc_hours","qualname":"<Date>::get_utc_hours","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCHours()` method returns the hours in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":96605,"byte_end":96625,"line_start":2039,"line_end":2039,"column_start":12,"column_end":32},"name":"get_utc_milliseconds","qualname":"<Date>::get_utc_milliseconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCMilliseconds()` method returns the milliseconds in the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1843},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":96957,"byte_end":96972,"line_start":2045,"line_end":2045,"column_start":12,"column_end":27},"name":"get_utc_minutes","qualname":"<Date>::get_utc_minutes","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCMinutes()` method returns the minutes in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1846},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":97371,"byte_end":97384,"line_start":2052,"line_end":2052,"column_start":12,"column_end":25},"name":"get_utc_month","qualname":"<Date>::get_utc_month","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCMonth()` returns the month of the specified date according to universal time,\n as a zero-based value (where zero indicates the first month of the year).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1849},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":97716,"byte_end":97731,"line_start":2058,"line_end":2058,"column_start":12,"column_end":27},"name":"get_utc_seconds","qualname":"<Date>::get_utc_seconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCSeconds()` method returns the seconds in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1852},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":98125,"byte_end":98128,"line_start":2066,"line_end":2066,"column_start":12,"column_end":15},"name":"new","qualname":"<Date>::new","value":"fn (init: &JsValue) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1855},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":98419,"byte_end":98424,"line_start":2073,"line_end":2073,"column_start":12,"column_end":17},"name":"new_0","qualname":"<Date>::new_0","value":"fn () -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents the current moment in\n time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":98808,"byte_end":98827,"line_start":2081,"line_end":2081,"column_start":12,"column_end":31},"name":"new_with_year_month","qualname":"<Date>::new_with_year_month","value":"fn (year: u32, month: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1861},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":99232,"byte_end":99255,"line_start":2089,"line_end":2089,"column_start":12,"column_end":35},"name":"new_with_year_month_day","qualname":"<Date>::new_with_year_month_day","value":"fn (year: u32, month: i32, day: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1864},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":99670,"byte_end":99696,"line_start":2097,"line_end":2097,"column_start":12,"column_end":38},"name":"new_with_year_month_day_hr","qualname":"<Date>::new_with_year_month_day_hr","value":"fn (year: u32, month: i32, day: i32, hr: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1867},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":100120,"byte_end":100150,"line_start":2105,"line_end":2105,"column_start":12,"column_end":42},"name":"new_with_year_month_day_hr_min","qualname":"<Date>::new_with_year_month_day_hr_min","value":"fn (year: u32, month: i32, day: i32, hr: i32, min: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":100631,"byte_end":100665,"line_start":2119,"line_end":2119,"column_start":12,"column_end":46},"name":"new_with_year_month_day_hr_min_sec","qualname":"<Date>::new_with_year_month_day_hr_min_sec","value":"fn (year: u32, month: i32, day: i32, hr: i32, min: i32, sec: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1873},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":101164,"byte_end":101204,"line_start":2134,"line_end":2134,"column_start":12,"column_end":52},"name":"new_with_year_month_day_hr_min_sec_milli","qualname":"<Date>::new_with_year_month_day_hr_min_sec_milli","value":"fn (year: u32, month: i32, day: i32, hr: i32, min: i32, sec: i32, milli: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1876},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":101654,"byte_end":101657,"line_start":2149,"line_end":2149,"column_start":12,"column_end":15},"name":"now","qualname":"<Date>::now","value":"fn () -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Date.now()` method returns the number of milliseconds\n elapsed since January 1, 1970 00:00:00 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1879},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":102127,"byte_end":102132,"line_start":2157,"line_end":2157,"column_start":12,"column_end":17},"name":"parse","qualname":"<Date>::parse","value":"fn (date: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Date.parse()` method parses a string representation of a date, and returns the number of milliseconds\n since January 1, 1970, 00:00:00 UTC or `NaN` if the string is unrecognized or, in some cases,\n contains illegal date values (e.g. 2015-02-31).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1882},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":102460,"byte_end":102468,"line_start":2163,"line_end":2163,"column_start":12,"column_end":20},"name":"set_date","qualname":"<Date>::set_date","value":"fn (&self, day: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setDate()` method sets the day of the Date object relative to the beginning of the currently set month.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":102829,"byte_end":102842,"line_start":2170,"line_end":2170,"column_start":12,"column_end":25},"name":"set_full_year","qualname":"<Date>::set_full_year","value":"fn (&self, year: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setFullYear()` method sets the full year for a specified date according to local time.\n Returns new timestamp.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":103204,"byte_end":103228,"line_start":2177,"line_end":2177,"column_start":12,"column_end":36},"name":"set_full_year_with_month","qualname":"<Date>::set_full_year_with_month","value":"fn (&self, year: u32, month: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setFullYear()` method sets the full year for a specified date according to local time.\n Returns new timestamp.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1891},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":103602,"byte_end":103631,"line_start":2184,"line_end":2184,"column_start":12,"column_end":41},"name":"set_full_year_with_month_date","qualname":"<Date>::set_full_year_with_month_date","value":"fn (&self, year: u32, month: i32, date: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setFullYear()` method sets the full year for a specified date according to local time.\n Returns new timestamp.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1894},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":104119,"byte_end":104128,"line_start":2192,"line_end":2192,"column_start":12,"column_end":21},"name":"set_hours","qualname":"<Date>::set_hours","value":"fn (&self, hours: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setHours()` method sets the hours for a specified date according to local time,\n and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented\n by the updated Date instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1897},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":104475,"byte_end":104491,"line_start":2198,"line_end":2198,"column_start":12,"column_end":28},"name":"set_milliseconds","qualname":"<Date>::set_milliseconds","value":"fn (&self, milliseconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setMilliseconds()` method sets the milliseconds for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1900},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":104825,"byte_end":104836,"line_start":2204,"line_end":2204,"column_start":12,"column_end":23},"name":"set_minutes","qualname":"<Date>::set_minutes","value":"fn (&self, minutes: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setMinutes()` method sets the minutes for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1903},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":105169,"byte_end":105178,"line_start":2210,"line_end":2210,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Date>::set_month","value":"fn (&self, month: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setMonth()` method sets the month for a specified date according to the currently set year.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1906},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":105505,"byte_end":105516,"line_start":2216,"line_end":2216,"column_start":12,"column_end":23},"name":"set_seconds","qualname":"<Date>::set_seconds","value":"fn (&self, seconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setSeconds()` method sets the seconds for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1909},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":105891,"byte_end":105899,"line_start":2223,"line_end":2223,"column_start":12,"column_end":20},"name":"set_time","qualname":"<Date>::set_time","value":"fn (&self, time: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setTime()` method sets the Date object to the time represented by a number of milliseconds\n since January 1, 1970, 00:00:00 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1912},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":106246,"byte_end":106258,"line_start":2230,"line_end":2230,"column_start":12,"column_end":24},"name":"set_utc_date","qualname":"<Date>::set_utc_date","value":"fn (&self, day: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCDate()` method sets the day of the month for a specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1915},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":106601,"byte_end":106618,"line_start":2236,"line_end":2236,"column_start":12,"column_end":29},"name":"set_utc_full_year","qualname":"<Date>::set_utc_full_year","value":"fn (&self, year: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCFullYear()` method sets the full year for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1918},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":106962,"byte_end":106990,"line_start":2242,"line_end":2242,"column_start":12,"column_end":40},"name":"set_utc_full_year_with_month","qualname":"<Date>::set_utc_full_year_with_month","value":"fn (&self, year: u32, month: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCFullYear()` method sets the full year for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1921},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":107346,"byte_end":107379,"line_start":2248,"line_end":2248,"column_start":12,"column_end":45},"name":"set_utc_full_year_with_month_date","qualname":"<Date>::set_utc_full_year_with_month_date","value":"fn (&self, year: u32, month: i32, date: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCFullYear()` method sets the full year for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1924},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":107880,"byte_end":107893,"line_start":2256,"line_end":2256,"column_start":12,"column_end":25},"name":"set_utc_hours","qualname":"<Date>::set_utc_hours","value":"fn (&self, hours: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCHours()` method sets the hour for a specified date according to universal time,\n and returns the number of milliseconds since  January 1, 1970 00:00:00 UTC until the time\n represented by the updated Date instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1927},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":108261,"byte_end":108281,"line_start":2263,"line_end":2263,"column_start":12,"column_end":32},"name":"set_utc_milliseconds","qualname":"<Date>::set_utc_milliseconds","value":"fn (&self, milliseconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCMilliseconds()` method sets the milliseconds for a specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1930},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":108628,"byte_end":108643,"line_start":2269,"line_end":2269,"column_start":12,"column_end":27},"name":"set_utc_minutes","qualname":"<Date>::set_utc_minutes","value":"fn (&self, minutes: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCMinutes()` method sets the minutes for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1933},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":108977,"byte_end":108990,"line_start":2275,"line_end":2275,"column_start":12,"column_end":25},"name":"set_utc_month","qualname":"<Date>::set_utc_month","value":"fn (&self, month: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCMonth()` method sets the month for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":109330,"byte_end":109345,"line_start":2281,"line_end":2281,"column_start":12,"column_end":27},"name":"set_utc_seconds","qualname":"<Date>::set_utc_seconds","value":"fn (&self, seconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCSeconds()` method sets the seconds for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1939},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":109711,"byte_end":109725,"line_start":2288,"line_end":2288,"column_start":12,"column_end":26},"name":"to_date_string","qualname":"<Date>::to_date_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toDateString()` method returns the date portion of a Date object\n in human readable form in American English.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1942},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":110256,"byte_end":110269,"line_start":2297,"line_end":2297,"column_start":12,"column_end":25},"name":"to_iso_string","qualname":"<Date>::to_iso_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toISOString()` method returns a string in simplified extended ISO format (ISO\n 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or\n ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset,\n as denoted by the suffix \"Z\"","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1945},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":110566,"byte_end":110573,"line_start":2303,"line_end":2303,"column_start":12,"column_end":19},"name":"to_json","qualname":"<Date>::to_json","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toJSON()` method returns a string representation of the Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1948},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":111332,"byte_end":111353,"line_start":2315,"line_end":2315,"column_start":12,"column_end":33},"name":"to_locale_date_string","qualname":"<Date>::to_locale_date_string","value":"fn (&self, locale: &str, options: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleDateString()` method returns a string with a language sensitive\n representation of the date portion of this date. The new locales and options\n arguments let applications specify the language whose formatting conventions\n should be used and allow to customize the behavior of the function.\n In older implementations, which ignore the locales and options arguments,\n the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1951},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":112104,"byte_end":112120,"line_start":2327,"line_end":2327,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Date>::to_locale_string","value":"fn (&self, locale: &str, options: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string with a language sensitive\n representation of this date. The new locales and options arguments\n let applications specify the language whose formatting conventions\n should be used and customize the behavior of the function.\n In older implementations, which ignore the locales\n and options arguments, the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1954},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":112895,"byte_end":112916,"line_start":2338,"line_end":2338,"column_start":12,"column_end":33},"name":"to_locale_time_string","qualname":"<Date>::to_locale_time_string","value":"fn (&self, locale: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleTimeString()` method returns a string with a language sensitive\n representation of the time portion of this date. The new locales and options\n arguments let applications specify the language whose formatting conventions should be\n used and customize the behavior of the function. In older implementations, which ignore\n the locales and options arguments, the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1957},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":113246,"byte_end":113255,"line_start":2345,"line_end":2345,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Date>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing\n the specified Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1960},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":113612,"byte_end":113626,"line_start":2352,"line_end":2352,"column_start":12,"column_end":26},"name":"to_time_string","qualname":"<Date>::to_time_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toTimeString()` method returns the time portion of a Date object in human\n readable form in American English.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1963},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":113948,"byte_end":113961,"line_start":2359,"line_end":2359,"column_start":12,"column_end":25},"name":"to_utc_string","qualname":"<Date>::to_utc_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toUTCString()` method converts a date to a string,\n using the UTC time zone.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114418,"byte_end":114421,"line_start":2368,"line_end":2368,"column_start":12,"column_end":15},"name":"utc","qualname":"<Date>::utc","value":"fn (year: f64, month: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Date.UTC()` method accepts the same parameters as the\n longest form of the constructor, and returns the number of\n milliseconds in a `Date` object since January 1, 1970,\n 00:00:00, universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1969},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114729,"byte_end":114737,"line_start":2375,"line_end":2375,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Date>::value_of","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method  returns the primitive value of\n a Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91155,"byte_end":91170,"line_start":1937,"line_end":1937,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2129},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114843,"byte_end":114849,"line_start":2382,"line_end":2382,"column_start":14,"column_end":20},"name":"Object","qualname":"::Object","value":"Object {  }","parent":null,"children":[{"krate":0,"index":2130}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2037},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":115241,"byte_end":115247,"line_start":2390,"line_end":2390,"column_start":12,"column_end":18},"name":"assign","qualname":"<Object>::assign","value":"fn (target: &Object, source: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.assign()` method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2040},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":115701,"byte_end":115708,"line_start":2398,"line_end":2398,"column_start":12,"column_end":19},"name":"assign2","qualname":"<Object>::assign2","value":"fn (target: &Object, source1: &Object, source2: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.assign()` method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2043},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":116181,"byte_end":116188,"line_start":2406,"line_end":2406,"column_start":12,"column_end":19},"name":"assign3","qualname":"<Object>::assign3","value":"fn (target: &Object, source1: &Object, source2: &Object, source3: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.assign()` method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2046},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":116596,"byte_end":116607,"line_start":2414,"line_end":2414,"column_start":12,"column_end":23},"name":"constructor","qualname":"<Object>::constructor","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The constructor property returns a reference to the `Object` constructor\n function that created the instance object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2049},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":116968,"byte_end":116974,"line_start":2421,"line_end":2421,"column_start":12,"column_end":18},"name":"create","qualname":"<Object>::create","value":"fn (prototype: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.create()` method creates a new object, using an existing\n object to provide the newly created object's prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2052},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":117416,"byte_end":117431,"line_start":2429,"line_end":2429,"column_start":12,"column_end":27},"name":"define_property","qualname":"<Object>::define_property","value":"fn (obj: &Object, prop: &JsValue, descriptor: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The static method `Object.defineProperty()` defines a new\n property directly on an object, or modifies an existing\n property on an object, and returns the object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2055},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":117875,"byte_end":117892,"line_start":2437,"line_end":2437,"column_start":12,"column_end":29},"name":"define_properties","qualname":"<Object>::define_properties","value":"fn (obj: &Object, props: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.defineProperties()` method defines new or modifies\n existing properties directly on an object, returning the\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2058},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":118427,"byte_end":118434,"line_start":2447,"line_end":2447,"column_start":12,"column_end":19},"name":"entries","qualname":"<Object>::entries","value":"fn (object: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.entries()` method returns an array of a given\n object's own enumerable property [key, value] pairs, in the\n same order as that provided by a for...in loop (the difference\n being that a for-in loop enumerates properties in the\n prototype chain as well).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2061},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":119047,"byte_end":119053,"line_start":2457,"line_end":2457,"column_start":12,"column_end":18},"name":"freeze","qualname":"<Object>::freeze","value":"fn (value: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.freeze()` method freezes an object: that is, prevents new\n properties from being added to it; prevents existing properties from\n being removed; and prevents existing properties, or their enumerability,\n configurability, or writability, from being changed, it also prevents\n the prototype from being changed. The method returns the passed object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2064},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":119410,"byte_end":119422,"line_start":2464,"line_end":2464,"column_start":12,"column_end":24},"name":"from_entries","qualname":"<Object>::from_entries","value":"fn (iterable: &JsValue) -> Result<Object, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `Object.fromEntries()` method transforms a list of key-value pairs\n into an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2067},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":119949,"byte_end":119976,"line_start":2473,"line_end":2473,"column_start":12,"column_end":39},"name":"get_own_property_descriptor","qualname":"<Object>::get_own_property_descriptor","value":"fn (obj: &Object, prop: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getOwnPropertyDescriptor()` method returns a\n property descriptor for an own property (that is, one directly\n present on an object and not in the object's prototype chain)\n of a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2070},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":120386,"byte_end":120414,"line_start":2480,"line_end":2480,"column_start":12,"column_end":40},"name":"get_own_property_descriptors","qualname":"<Object>::get_own_property_descriptors","value":"fn (obj: &Object) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getOwnPropertyDescriptors()` method returns all own\n property descriptors of a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2073},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":120885,"byte_end":120907,"line_start":2488,"line_end":2488,"column_start":12,"column_end":34},"name":"get_own_property_names","qualname":"<Object>::get_own_property_names","value":"fn (obj: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getOwnPropertyNames()` method returns an array of\n all properties (including non-enumerable properties except for\n those which use Symbol) found directly upon a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2076},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":121309,"byte_end":121333,"line_start":2495,"line_end":2495,"column_start":12,"column_end":36},"name":"get_own_property_symbols","qualname":"<Object>::get_own_property_symbols","value":"fn (obj: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getOwnPropertySymbols()` method returns an array of\n all symbol properties found directly upon a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2079},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":121747,"byte_end":121763,"line_start":2503,"line_end":2503,"column_start":12,"column_end":28},"name":"get_prototype_of","qualname":"<Object>::get_prototype_of","value":"fn (obj: &JsValue) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getPrototypeOf()` method returns the prototype\n (i.e. the value of the internal [[Prototype]] property) of the\n specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2082},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":122176,"byte_end":122192,"line_start":2511,"line_end":2511,"column_start":12,"column_end":28},"name":"has_own_property","qualname":"<Object>::has_own_property","value":"fn (&self, property: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `hasOwnProperty()` method returns a boolean indicating whether the\n object has the specified property as its own property (as opposed to\n inheriting it).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2085},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":122507,"byte_end":122509,"line_start":2517,"line_end":2517,"column_start":12,"column_end":14},"name":"is","qualname":"<Object>::is","value":"fn (value_1: &JsValue, value_2: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.is()` method determines whether two values are the same value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2088},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":122917,"byte_end":122930,"line_start":2524,"line_end":2524,"column_start":12,"column_end":25},"name":"is_extensible","qualname":"<Object>::is_extensible","value":"fn (object: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isExtensible()` method determines if an object is extensible\n (whether it can have new properties added to it).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2091},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":123237,"byte_end":123246,"line_start":2530,"line_end":2530,"column_start":12,"column_end":21},"name":"is_frozen","qualname":"<Object>::is_frozen","value":"fn (object: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isFrozen()` determines if an object is frozen.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2094},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":123560,"byte_end":123569,"line_start":2536,"line_end":2536,"column_start":12,"column_end":21},"name":"is_sealed","qualname":"<Object>::is_sealed","value":"fn (object: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isSealed()` method determines if an object is sealed.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2097},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":123909,"byte_end":123924,"line_start":2543,"line_end":2543,"column_start":12,"column_end":27},"name":"is_prototype_of","qualname":"<Object>::is_prototype_of","value":"fn (&self, value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `isPrototypeOf()` method checks if an object exists in another\n object's prototype chain.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2100},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":124299,"byte_end":124303,"line_start":2550,"line_end":2550,"column_start":12,"column_end":16},"name":"keys","qualname":"<Object>::keys","value":"fn (object: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.keys()` method returns an array of a given object's property\n names, in the same order as we get with a normal loop.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2103},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":124563,"byte_end":124566,"line_start":2556,"line_end":2556,"column_start":12,"column_end":15},"name":"new","qualname":"<Object>::new","value":"fn () -> Object","parent":null,"children":[],"decl_id":null,"docs":" The [`Object`] constructor creates an object wrapper.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2106},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":124983,"byte_end":125001,"line_start":2564,"line_end":2564,"column_start":12,"column_end":30},"name":"prevent_extensions","qualname":"<Object>::prevent_extensions","value":"fn (object: &Object) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `Object.preventExtensions()` method prevents new properties from\n ever being added to an object (i.e. prevents future extensions to the\n object).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2109},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":125365,"byte_end":125387,"line_start":2571,"line_end":2571,"column_start":12,"column_end":34},"name":"property_is_enumerable","qualname":"<Object>::property_is_enumerable","value":"fn (&self, property: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `propertyIsEnumerable()` method returns a Boolean indicating\n whether the specified property is enumerable.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":125884,"byte_end":125888,"line_start":2580,"line_end":2580,"column_start":12,"column_end":16},"name":"seal","qualname":"<Object>::seal","value":"fn (value: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.seal()` method seals an object, preventing new properties\n from being added to it and marking all existing properties as\n non-configurable.  Values of present properties can still be changed as\n long as they are writable.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":126318,"byte_end":126334,"line_start":2588,"line_end":2588,"column_start":12,"column_end":28},"name":"set_prototype_of","qualname":"<Object>::set_prototype_of","value":"fn (object: &Object, prototype: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.setPrototypeOf()` method sets the prototype (i.e., the\n internal `[[Prototype]]` property) of a specified object to another\n object or `null`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2118},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":126772,"byte_end":126788,"line_start":2596,"line_end":2596,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Object>::to_locale_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string representing the object.\n This method is meant to be overridden by derived objects for\n locale-specific purposes.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":127085,"byte_end":127094,"line_start":2602,"line_end":2602,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Object>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2124},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":127407,"byte_end":127415,"line_start":2609,"line_end":2609,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Object>::value_of","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of the\n specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2127},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":127915,"byte_end":127921,"line_start":2618,"line_end":2618,"column_start":12,"column_end":18},"name":"values","qualname":"<Object>::values","value":"fn (object: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.values()` method returns an array of a given object's own\n enumerable property values, in the same order as that provided by a\n `for...in` loop (the difference being that a for-in loop enumerates\n properties in the prototype chain as well).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":114773,"byte_end":114788,"line_start":2379,"line_end":2379,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128170,"byte_end":128178,"line_start":2627,"line_end":2627,"column_start":12,"column_end":20},"name":"try_from","qualname":"<Object>::try_from","value":"fn (val: &JsValue) -> Option<&Object>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Object` value of this JS value if it's an instance of an\n object.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2193},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128581,"byte_end":128586,"line_start":2649,"line_end":2649,"column_start":14,"column_end":19},"name":"Proxy","qualname":"::Proxy","value":"Proxy {  }","parent":null,"children":[{"krate":0,"index":2194}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128511,"byte_end":128526,"line_start":2646,"line_end":2646,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128511,"byte_end":128526,"line_start":2646,"line_end":2646,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128511,"byte_end":128526,"line_start":2646,"line_end":2646,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2188},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128938,"byte_end":128941,"line_start":2657,"line_end":2657,"column_start":12,"column_end":15},"name":"new","qualname":"<Proxy>::new","value":"fn (target: &JsValue, handler: &Object) -> Proxy","parent":null,"children":[],"decl_id":null,"docs":" The [`Proxy`] object is used to define custom behavior for fundamental\n operations (e.g. property lookup, assignment, enumeration, function\n invocation, etc).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128511,"byte_end":128526,"line_start":2646,"line_end":2646,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128511,"byte_end":128526,"line_start":2646,"line_end":2646,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2191},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":129275,"byte_end":129284,"line_start":2664,"line_end":2664,"column_start":12,"column_end":21},"name":"revocable","qualname":"<Proxy>::revocable","value":"fn (target: &JsValue, handler: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Proxy.revocable()` method is used to create a revocable [`Proxy`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128511,"byte_end":128526,"line_start":2646,"line_end":2646,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128511,"byte_end":128526,"line_start":2646,"line_end":2646,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2266},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":129736,"byte_end":129746,"line_start":2676,"line_end":2676,"column_start":14,"column_end":24},"name":"RangeError","qualname":"::RangeError","value":"RangeError {  }","parent":null,"children":[{"krate":0,"index":2267}],"decl_id":null,"docs":" The `RangeError` object indicates an error when a value is not in the set\n or range of allowed values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":129349,"byte_end":129364,"line_start":2668,"line_end":2668,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":129349,"byte_end":129364,"line_start":2668,"line_end":2668,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":129349,"byte_end":129364,"line_start":2668,"line_end":2668,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2264},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130040,"byte_end":130043,"line_start":2683,"line_end":2683,"column_start":12,"column_end":15},"name":"new","qualname":"<RangeError>::new","value":"fn (message: &str) -> RangeError","parent":null,"children":[],"decl_id":null,"docs":" The `RangeError` object indicates an error when a value is not in the set\n or range of allowed values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":129349,"byte_end":129364,"line_start":2668,"line_end":2668,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":129349,"byte_end":129364,"line_start":2668,"line_end":2668,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2346},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130476,"byte_end":130490,"line_start":2695,"line_end":2695,"column_start":14,"column_end":28},"name":"ReferenceError","qualname":"::ReferenceError","value":"ReferenceError {  }","parent":null,"children":[{"krate":0,"index":2347}],"decl_id":null,"docs":" The `ReferenceError` object represents an error when a non-existent\n variable is referenced.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130095,"byte_end":130110,"line_start":2687,"line_end":2687,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130095,"byte_end":130110,"line_start":2687,"line_end":2687,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130095,"byte_end":130110,"line_start":2687,"line_end":2687,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2344},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130778,"byte_end":130781,"line_start":2702,"line_end":2702,"column_start":12,"column_end":15},"name":"new","qualname":"<ReferenceError>::new","value":"fn (message: &str) -> ReferenceError","parent":null,"children":[],"decl_id":null,"docs":" The `ReferenceError` object represents an error when a non-existent\n variable is referenced.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130095,"byte_end":130110,"line_start":2687,"line_end":2687,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130095,"byte_end":130110,"line_start":2687,"line_end":2687,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":90},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130852,"byte_end":130859,"line_start":2706,"line_end":2706,"column_start":9,"column_end":16},"name":"Reflect","qualname":"::Reflect","value":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":2359},{"krate":0,"index":2361},{"krate":0,"index":2363},{"krate":0,"index":2365},{"krate":0,"index":2367},{"krate":0,"index":2369},{"krate":0,"index":2371},{"krate":0,"index":2373},{"krate":0,"index":2375},{"krate":0,"index":2377},{"krate":0,"index":2379},{"krate":0,"index":2381},{"krate":0,"index":2383},{"krate":0,"index":2385},{"krate":0,"index":2387},{"krate":0,"index":2389},{"krate":0,"index":2391},{"krate":0,"index":2393},{"krate":0,"index":2395}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130819,"byte_end":130843,"line_start":2705,"line_end":2705,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2359},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":131256,"byte_end":131261,"line_start":2717,"line_end":2717,"column_start":16,"column_end":21},"name":"apply","qualname":"::Reflect::apply","value":"fn (target: &Function, this_argument: &JsValue, arguments_list: &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.apply()` method calls a target function with\n arguments as specified.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2361},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":131861,"byte_end":131870,"line_start":2729,"line_end":2729,"column_start":16,"column_end":25},"name":"construct","qualname":"::Reflect::construct","value":"fn (target: &Function, arguments_list: &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.construct()` method acts like the new operator, but\n as a function.  It is equivalent to calling `new target(...args)`. It\n gives also the added option to specify a different prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2363},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":132419,"byte_end":132444,"line_start":2737,"line_end":2737,"column_start":16,"column_end":41},"name":"construct_with_new_target","qualname":"::Reflect::construct_with_new_target","value":"fn (target: &Function, arguments_list: &Array, new_target: &Function) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.construct()` method acts like the new operator, but\n as a function.  It is equivalent to calling `new target(...args)`. It\n gives also the added option to specify a different prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2365},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":132961,"byte_end":132976,"line_start":2748,"line_end":2748,"column_start":16,"column_end":31},"name":"define_property","qualname":"::Reflect::define_property","value":"fn (target: &Object, property_key: &JsValue, attributes: &Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.defineProperty()` method is like\n `Object.defineProperty()` but returns a `Boolean`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2367},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":133505,"byte_end":133520,"line_start":2759,"line_end":2759,"column_start":16,"column_end":31},"name":"delete_property","qualname":"::Reflect::delete_property","value":"fn (target: &Object, key: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.deleteProperty()` method allows to delete\n properties.  It is like the `delete` operator as a function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2369},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":133930,"byte_end":133933,"line_start":2766,"line_end":2766,"column_start":16,"column_end":19},"name":"get","qualname":"::Reflect::get","value":"fn (target: &JsValue, key: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.get()` method works like getting a property from\n an object (`target[propertyKey]`) as a function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2371},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":134195,"byte_end":134202,"line_start":2771,"line_end":2771,"column_start":16,"column_end":23},"name":"get_f64","qualname":"::Reflect::get_f64","value":"fn (target: &JsValue, key: f64) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`get`](fn.get.html)\n except the key is an `f64`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2373},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":134458,"byte_end":134465,"line_start":2776,"line_end":2776,"column_start":16,"column_end":23},"name":"get_u32","qualname":"::Reflect::get_u32","value":"fn (target: &JsValue, key: u32) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`get`](fn.get.html)\n except the key is a `u32`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2375},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":135037,"byte_end":135064,"line_start":2784,"line_end":2784,"column_start":16,"column_end":43},"name":"get_own_property_descriptor","qualname":"::Reflect::get_own_property_descriptor","value":"fn (target: &Object, property_key: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.getOwnPropertyDescriptor()` method is similar to\n `Object.getOwnPropertyDescriptor()`. It returns a property descriptor\n of the given property if it exists on the object, `undefined` otherwise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2377},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":135673,"byte_end":135689,"line_start":2796,"line_end":2796,"column_start":16,"column_end":32},"name":"get_prototype_of","qualname":"::Reflect::get_prototype_of","value":"fn (target: &JsValue) -> Result<Object, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.getPrototypeOf()` method is almost the same\n method as `Object.getPrototypeOf()`. It returns the prototype\n (i.e. the value of the internal `[[Prototype]]` property) of\n the specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2379},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":136045,"byte_end":136048,"line_start":2803,"line_end":2803,"column_start":16,"column_end":19},"name":"has","qualname":"::Reflect::has","value":"fn (target: &JsValue, property_key: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.has()` method works like the in operator as a\n function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2381},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":136595,"byte_end":136608,"line_start":2811,"line_end":2811,"column_start":16,"column_end":29},"name":"is_extensible","qualname":"::Reflect::is_extensible","value":"fn (target: &Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.isExtensible()` method determines if an object is\n extensible (whether it can have new properties added to it). It is\n similar to `Object.isExtensible()`, but with some differences.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2383},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":137005,"byte_end":137013,"line_start":2818,"line_end":2818,"column_start":16,"column_end":24},"name":"own_keys","qualname":"::Reflect::own_keys","value":"fn (target: &JsValue) -> Result<Array, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.ownKeys()` method returns an array of the\n target object's own property keys.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2385},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":137589,"byte_end":137607,"line_start":2827,"line_end":2827,"column_start":16,"column_end":34},"name":"prevent_extensions","qualname":"::Reflect::prevent_extensions","value":"fn (target: &Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.preventExtensions()` method prevents new\n properties from ever being added to an object (i.e. prevents\n future extensions to the object). It is similar to\n `Object.preventExtensions()`, but with some differences.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2387},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":137962,"byte_end":137965,"line_start":2834,"line_end":2834,"column_start":16,"column_end":19},"name":"set","qualname":"::Reflect::set","value":"fn (target: &JsValue, property_key: &JsValue, value: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.set()` method works like setting a\n property on an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2389},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":138297,"byte_end":138304,"line_start":2843,"line_end":2843,"column_start":16,"column_end":23},"name":"set_f64","qualname":"::Reflect::set_f64","value":"fn (target: &JsValue, property_key: f64, value: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`set`](fn.set.html)\n except the key is an `f64`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2391},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":138630,"byte_end":138637,"line_start":2852,"line_end":2852,"column_start":16,"column_end":23},"name":"set_u32","qualname":"::Reflect::set_u32","value":"fn (target: &JsValue, property_key: u32, value: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`set`](fn.set.html)\n except the key is a `u32`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2393},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139091,"byte_end":139108,"line_start":2863,"line_end":2863,"column_start":16,"column_end":33},"name":"set_with_receiver","qualname":"::Reflect::set_with_receiver","value":"fn (target: &JsValue, property_key: &JsValue, value: &JsValue, receiver: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.set()` method works like setting a\n property on an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2395},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139781,"byte_end":139797,"line_start":2877,"line_end":2877,"column_start":16,"column_end":32},"name":"set_prototype_of","qualname":"::Reflect::set_prototype_of","value":"fn (target: &Object, prototype: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.setPrototypeOf()` method is the same\n method as `Object.setPrototypeOf()`. It sets the prototype\n (i.e., the internal `[[Prototype]]` property) of a specified\n object to another object or to null.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":130900,"byte_end":130915,"line_start":2710,"line_end":2710,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2539},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":140004,"byte_end":140010,"line_start":2886,"line_end":2886,"column_start":14,"column_end":20},"name":"RegExp","qualname":"::RegExp","value":"RegExp {  }","parent":null,"children":[{"krate":0,"index":2540}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2456},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":140304,"byte_end":140308,"line_start":2893,"line_end":2893,"column_start":12,"column_end":16},"name":"exec","qualname":"<RegExp>::exec","value":"fn (&self, text: &str) -> Option<Array>","parent":null,"children":[],"decl_id":null,"docs":" The `exec()` method executes a search for a match in a specified\n string. Returns a result array, or null.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2459},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":140651,"byte_end":140656,"line_start":2900,"line_end":2900,"column_start":12,"column_end":17},"name":"flags","qualname":"<RegExp>::flags","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The flags property returns a string consisting of the flags of\n the current regular expression object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2462},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":141061,"byte_end":141067,"line_start":2908,"line_end":2908,"column_start":12,"column_end":18},"name":"global","qualname":"<RegExp>::global","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The global property indicates whether or not the \"g\" flag is\n used with the regular expression. global is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2465},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":141502,"byte_end":141513,"line_start":2916,"line_end":2916,"column_start":12,"column_end":23},"name":"ignore_case","qualname":"<RegExp>::ignore_case","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The ignoreCase property indicates whether or not the \"i\" flag\n is used with the regular expression. ignoreCase is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2468},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":141957,"byte_end":141962,"line_start":2925,"line_end":2925,"column_start":12,"column_end":17},"name":"input","qualname":"<RegExp>::input","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard input property is a static property of\n regular expressions that contains the string against which a\n regular expression is matched. RegExp.$_ is an alias for this\n property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2471},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":142339,"byte_end":142349,"line_start":2932,"line_end":2932,"column_start":12,"column_end":22},"name":"last_index","qualname":"<RegExp>::last_index","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The lastIndex is a read/write integer property of regular expression\n instances that specifies the index at which to start the next match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2474},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":142734,"byte_end":142748,"line_start":2939,"line_end":2939,"column_start":12,"column_end":26},"name":"set_last_index","qualname":"<RegExp>::set_last_index","value":"fn (&self, index: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The lastIndex is a read/write integer property of regular expression\n instances that specifies the index at which to start the next match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2477},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":143204,"byte_end":143214,"line_start":2947,"line_end":2947,"column_start":12,"column_end":22},"name":"last_match","qualname":"<RegExp>::last_match","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard lastMatch property is a static and read-only\n property of regular expressions that contains the last matched\n characters. `RegExp.$&` is an alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2480},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":143684,"byte_end":143694,"line_start":2956,"line_end":2956,"column_start":12,"column_end":22},"name":"last_paren","qualname":"<RegExp>::last_paren","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard lastParen property is a static and read-only\n property of regular expressions that contains the last\n parenthesized substring match, if any. `RegExp.$+` is an alias\n for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2483},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":144169,"byte_end":144181,"line_start":2965,"line_end":2965,"column_start":12,"column_end":24},"name":"left_context","qualname":"<RegExp>::left_context","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard leftContext property is a static and\n read-only property of regular expressions that contains the\n substring preceding the most recent match. `RegExp.$`` is an\n alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2486},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":144582,"byte_end":144591,"line_start":2973,"line_end":2973,"column_start":12,"column_end":21},"name":"multiline","qualname":"<RegExp>::multiline","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The multiline property indicates whether or not the \"m\" flag\n is used with the regular expression. multiline is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2489},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":145018,"byte_end":145020,"line_start":2981,"line_end":2981,"column_start":12,"column_end":14},"name":"n1","qualname":"<RegExp>::n1","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard $1, $2, $3, $4, $5, $6, $7, $8, $9 properties\n are static and read-only properties of regular expressions\n that contain parenthesized substring matches.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2492},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":145118,"byte_end":145120,"line_start":2983,"line_end":2983,"column_start":12,"column_end":14},"name":"n2","qualname":"<RegExp>::n2","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2495},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":145218,"byte_end":145220,"line_start":2985,"line_end":2985,"column_start":12,"column_end":14},"name":"n3","qualname":"<RegExp>::n3","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":145318,"byte_end":145320,"line_start":2987,"line_end":2987,"column_start":12,"column_end":14},"name":"n4","qualname":"<RegExp>::n4","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2501},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":145418,"byte_end":145420,"line_start":2989,"line_end":2989,"column_start":12,"column_end":14},"name":"n5","qualname":"<RegExp>::n5","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2504},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":145518,"byte_end":145520,"line_start":2991,"line_end":2991,"column_start":12,"column_end":14},"name":"n6","qualname":"<RegExp>::n6","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2507},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":145618,"byte_end":145620,"line_start":2993,"line_end":2993,"column_start":12,"column_end":14},"name":"n7","qualname":"<RegExp>::n7","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2510},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":145718,"byte_end":145720,"line_start":2995,"line_end":2995,"column_start":12,"column_end":14},"name":"n8","qualname":"<RegExp>::n8","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2513},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":145818,"byte_end":145820,"line_start":2997,"line_end":2997,"column_start":12,"column_end":14},"name":"n9","qualname":"<RegExp>::n9","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2516},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":146109,"byte_end":146112,"line_start":3003,"line_end":3003,"column_start":12,"column_end":15},"name":"new","qualname":"<RegExp>::new","value":"fn (pattern: &str, flags: &str) -> RegExp","parent":null,"children":[],"decl_id":null,"docs":" The `RegExp` constructor creates a regular expression object for matching text with a pattern.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":146196,"byte_end":146206,"line_start":3005,"line_end":3005,"column_start":12,"column_end":22},"name":"new_regexp","qualname":"<RegExp>::new_regexp","value":"fn (pattern: &RegExp, flags: &str) -> RegExp","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":146711,"byte_end":146724,"line_start":3014,"line_end":3014,"column_start":12,"column_end":25},"name":"right_context","qualname":"<RegExp>::right_context","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard rightContext property is a static and\n read-only property of regular expressions that contains the\n substring following the most recent match. `RegExp.$'` is an\n alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2525},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":147106,"byte_end":147112,"line_start":3022,"line_end":3022,"column_start":12,"column_end":18},"name":"source","qualname":"<RegExp>::source","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The source property returns a String containing the source\n text of the regexp object, and it doesn't contain the two\n forward slashes on both sides and any flags.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2528},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":147607,"byte_end":147613,"line_start":3032,"line_end":3032,"column_start":12,"column_end":18},"name":"sticky","qualname":"<RegExp>::sticky","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The sticky property reflects whether or not the search is\n sticky (searches in strings only from the index indicated by\n the lastIndex property of this regular expression). sticky is\n a read-only property of an individual regular expression\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2531},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":147958,"byte_end":147962,"line_start":3040,"line_end":3040,"column_start":12,"column_end":16},"name":"test","qualname":"<RegExp>::test","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `test()` method executes a search for a match between a\n regular expression and a specified string. Returns true or\n false.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2534},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148287,"byte_end":148296,"line_start":3047,"line_end":3047,"column_start":12,"column_end":21},"name":"to_string","qualname":"<RegExp>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the\n regular expression.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2537},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148702,"byte_end":148709,"line_start":3055,"line_end":3055,"column_start":12,"column_end":19},"name":"unicode","qualname":"<RegExp>::unicode","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The unicode property indicates whether or not the \"u\" flag is\n used with a regular expression. unicode is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":139881,"byte_end":139896,"line_start":2882,"line_end":2882,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2631},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148867,"byte_end":148870,"line_start":3063,"line_end":3063,"column_start":14,"column_end":17},"name":"Set","qualname":"::Set","value":"Set {  }","parent":null,"children":[{"krate":0,"index":2632}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2611},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":149150,"byte_end":149153,"line_start":3070,"line_end":3070,"column_start":12,"column_end":15},"name":"add","qualname":"<Set>::add","value":"fn (&self, value: &JsValue) -> Set","parent":null,"children":[],"decl_id":null,"docs":" The `add()` method appends a new element with a specified value to the\n end of a [`Set`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2614},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":149432,"byte_end":149437,"line_start":3076,"line_end":3076,"column_start":12,"column_end":17},"name":"clear","qualname":"<Set>::clear","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `clear()` method removes all elements from a [`Set`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2617},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":149711,"byte_end":149717,"line_start":3083,"line_end":3083,"column_start":12,"column_end":18},"name":"delete","qualname":"<Set>::delete","value":"fn (&self, value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a [`Set`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2620},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":150072,"byte_end":150080,"line_start":3090,"line_end":3090,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Set>::for_each","value":"fn (&self, callback: &mut dyn FnMut(JsValue, JsValue, Set)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once for each value\n in the Set object, in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2623},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":150452,"byte_end":150455,"line_start":3097,"line_end":3097,"column_start":12,"column_end":15},"name":"has","qualname":"<Set>::has","value":"fn (&self, value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an element with\n the specified value exists in a [`Set`] object or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2626},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":150785,"byte_end":150788,"line_start":3104,"line_end":3104,"column_start":12,"column_end":15},"name":"new","qualname":"<Set>::new","value":"fn (init: &JsValue) -> Set","parent":null,"children":[],"decl_id":null,"docs":" The [`Set`] object lets you store unique values of any type, whether\n primitive values or object references.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2629},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":151092,"byte_end":151096,"line_start":3111,"line_end":3111,"column_start":12,"column_end":16},"name":"size","qualname":"<Set>::size","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The size accessor property returns the number of elements in a [`Set`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":148744,"byte_end":148759,"line_start":3059,"line_end":3059,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":151731,"byte_end":151738,"line_start":3125,"line_end":3125,"column_start":12,"column_end":19},"name":"entries","qualname":"<Set>::entries","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `entries()` method returns a new Iterator object that contains an\n array of [value, value] for each element in the Set object, in insertion\n order. For Set objects there is no key like in Map objects. However, to\n keep the API similar to the Map object, each entry has the same value\n for its key and value here, so that an array [value, value] is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":151135,"byte_end":151150,"line_start":3115,"line_end":3115,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":151135,"byte_end":151150,"line_start":3115,"line_end":3115,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":152103,"byte_end":152107,"line_start":3133,"line_end":3133,"column_start":12,"column_end":16},"name":"keys","qualname":"<Set>::keys","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `keys()` method is an alias for this method (for similarity with\n Map objects); it behaves exactly the same and returns values\n of Set elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":151135,"byte_end":151150,"line_start":3115,"line_end":3115,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":151135,"byte_end":151150,"line_start":3115,"line_end":3115,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":152449,"byte_end":152455,"line_start":3140,"line_end":3140,"column_start":12,"column_end":18},"name":"values","qualname":"<Set>::values","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `values()` method returns a new Iterator object that contains the\n values for each element in the Set object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":151135,"byte_end":151150,"line_start":3115,"line_end":3115,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":151135,"byte_end":151150,"line_start":3115,"line_end":3115,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2720},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":152949,"byte_end":152960,"line_start":3153,"line_end":3153,"column_start":14,"column_end":25},"name":"SyntaxError","qualname":"::SyntaxError","value":"SyntaxError {  }","parent":null,"children":[{"krate":0,"index":2721}],"decl_id":null,"docs":" A `SyntaxError` is thrown when the JavaScript engine encounters tokens or\n token order that does not conform to the syntax of the language when\n parsing code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":152498,"byte_end":152513,"line_start":3144,"line_end":3144,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":152498,"byte_end":152513,"line_start":3144,"line_end":3144,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":152498,"byte_end":152513,"line_start":3144,"line_end":3144,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2718},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":153318,"byte_end":153321,"line_start":3161,"line_end":3161,"column_start":12,"column_end":15},"name":"new","qualname":"<SyntaxError>::new","value":"fn (message: &str) -> SyntaxError","parent":null,"children":[],"decl_id":null,"docs":" A `SyntaxError` is thrown when the JavaScript engine encounters tokens or\n token order that does not conform to the syntax of the language when\n parsing code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":152498,"byte_end":152513,"line_start":3144,"line_end":3144,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":152498,"byte_end":152513,"line_start":3144,"line_end":3144,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2800},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":153738,"byte_end":153747,"line_start":3173,"line_end":3173,"column_start":14,"column_end":23},"name":"TypeError","qualname":"::TypeError","value":"TypeError {  }","parent":null,"children":[{"krate":0,"index":2801}],"decl_id":null,"docs":" The `TypeError` object represents an error when a value is not of the\n expected type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":153369,"byte_end":153384,"line_start":3165,"line_end":3165,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":153369,"byte_end":153384,"line_start":3165,"line_end":3165,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":153369,"byte_end":153384,"line_start":3165,"line_end":3165,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2798},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154023,"byte_end":154026,"line_start":3180,"line_end":3180,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeError>::new","value":"fn (message: &str) -> TypeError","parent":null,"children":[],"decl_id":null,"docs":" The `TypeError` object represents an error when a value is not of the\n expected type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":153369,"byte_end":153384,"line_start":3165,"line_end":3165,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":153369,"byte_end":153384,"line_start":3165,"line_end":3165,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2880},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154477,"byte_end":154485,"line_start":3192,"line_end":3192,"column_start":14,"column_end":22},"name":"UriError","qualname":"::UriError","value":"UriError {  }","parent":null,"children":[{"krate":0,"index":2881}],"decl_id":null,"docs":" The `URIError` object represents an error when a global URI handling\n function was used in a wrong way.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154071,"byte_end":154086,"line_start":3184,"line_end":3184,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154071,"byte_end":154086,"line_start":3184,"line_end":3184,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154071,"byte_end":154086,"line_start":3184,"line_end":3184,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2878},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154801,"byte_end":154804,"line_start":3199,"line_end":3199,"column_start":12,"column_end":15},"name":"new","qualname":"<UriError>::new","value":"fn (message: &str) -> UriError","parent":null,"children":[],"decl_id":null,"docs":" The `URIError` object represents an error when a global URI handling\n function was used in a wrong way.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154071,"byte_end":154086,"line_start":3184,"line_end":3184,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154071,"byte_end":154086,"line_start":3184,"line_end":3184,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2966},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154970,"byte_end":154977,"line_start":3207,"line_end":3207,"column_start":14,"column_end":21},"name":"WeakMap","qualname":"::WeakMap","value":"WeakMap {  }","parent":null,"children":[{"krate":0,"index":2967}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154847,"byte_end":154862,"line_start":3203,"line_end":3203,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154847,"byte_end":154862,"line_start":3203,"line_end":3203,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154847,"byte_end":154862,"line_start":3203,"line_end":3203,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2952},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":155339,"byte_end":155342,"line_start":3215,"line_end":3215,"column_start":12,"column_end":15},"name":"new","qualname":"<WeakMap>::new","value":"fn () -> WeakMap","parent":null,"children":[],"decl_id":null,"docs":" The [`WeakMap`] object is a collection of key/value pairs in which the\n keys are weakly referenced.  The keys must be objects and the values can\n be arbitrary values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154847,"byte_end":154862,"line_start":3203,"line_end":3203,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154847,"byte_end":154862,"line_start":3203,"line_end":3203,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2955},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":155670,"byte_end":155673,"line_start":3222,"line_end":3222,"column_start":12,"column_end":15},"name":"set","qualname":"<WeakMap>::set","value":"fn (&self, key: &Object, value: &JsValue) -> WeakMap","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method sets the value for the key in the [`WeakMap`] object.\n Returns the [`WeakMap`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154847,"byte_end":154862,"line_start":3203,"line_end":3203,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154847,"byte_end":154862,"line_start":3203,"line_end":3203,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2958},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156000,"byte_end":156003,"line_start":3229,"line_end":3229,"column_start":12,"column_end":15},"name":"get","qualname":"<WeakMap>::get","value":"fn (&self, key: &Object) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `get()` method returns a specified by key element\n from a [`WeakMap`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154847,"byte_end":154862,"line_start":3203,"line_end":3203,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154847,"byte_end":154862,"line_start":3203,"line_end":3203,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2961},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156363,"byte_end":156366,"line_start":3236,"line_end":3236,"column_start":12,"column_end":15},"name":"has","qualname":"<WeakMap>::has","value":"fn (&self, key: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an element with\n the specified key exists in the [`WeakMap`] object or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154847,"byte_end":154862,"line_start":3203,"line_end":3203,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154847,"byte_end":154862,"line_start":3203,"line_end":3203,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2964},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156674,"byte_end":156680,"line_start":3243,"line_end":3243,"column_start":12,"column_end":18},"name":"delete","qualname":"<WeakMap>::delete","value":"fn (&self, key: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a [`WeakMap`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154847,"byte_end":154862,"line_start":3203,"line_end":3203,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":154847,"byte_end":154862,"line_start":3203,"line_end":3203,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":3049},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156857,"byte_end":156864,"line_start":3251,"line_end":3251,"column_start":14,"column_end":21},"name":"WeakSet","qualname":"::WeakSet","value":"WeakSet {  }","parent":null,"children":[{"krate":0,"index":3050}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156734,"byte_end":156749,"line_start":3247,"line_end":3247,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156734,"byte_end":156749,"line_start":3247,"line_end":3247,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156734,"byte_end":156749,"line_start":3247,"line_end":3247,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3038},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":157118,"byte_end":157121,"line_start":3257,"line_end":3257,"column_start":12,"column_end":15},"name":"new","qualname":"<WeakSet>::new","value":"fn () -> WeakSet","parent":null,"children":[],"decl_id":null,"docs":" The `WeakSet` object lets you store weakly held objects in a collection.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156734,"byte_end":156749,"line_start":3247,"line_end":3247,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156734,"byte_end":156749,"line_start":3247,"line_end":3247,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3041},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":157416,"byte_end":157419,"line_start":3264,"line_end":3264,"column_start":12,"column_end":15},"name":"has","qualname":"<WeakSet>::has","value":"fn (&self, value: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an object exists\n in a WeakSet or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156734,"byte_end":156749,"line_start":3247,"line_end":3247,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156734,"byte_end":156749,"line_start":3247,"line_end":3247,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3044},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":157711,"byte_end":157714,"line_start":3270,"line_end":3270,"column_start":12,"column_end":15},"name":"add","qualname":"<WeakSet>::add","value":"fn (&self, value: &Object) -> WeakSet","parent":null,"children":[],"decl_id":null,"docs":" The `add()` method appends a new object to the end of a WeakSet object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156734,"byte_end":156749,"line_start":3247,"line_end":3247,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156734,"byte_end":156749,"line_start":3247,"line_end":3247,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3047},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158023,"byte_end":158029,"line_start":3277,"line_end":3277,"column_start":12,"column_end":18},"name":"delete","qualname":"<WeakSet>::delete","value":"fn (&self, value: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a WeakSet\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156734,"byte_end":156749,"line_start":3247,"line_end":3247,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":156734,"byte_end":156749,"line_start":3247,"line_end":3247,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":92},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158107,"byte_end":158118,"line_start":3281,"line_end":3281,"column_start":9,"column_end":20},"name":"WebAssembly","qualname":"::WebAssembly","value":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":3062},{"krate":0,"index":3064},{"krate":0,"index":3066},{"krate":0,"index":3068},{"krate":0,"index":3070},{"krate":0,"index":3133},{"krate":0,"index":3144},{"krate":0,"index":3142},{"krate":0,"index":3138},{"krate":0,"index":3139},{"krate":0,"index":3135},{"krate":0,"index":3136},{"krate":0,"index":3072},{"krate":0,"index":3124},{"krate":0,"index":3127},{"krate":0,"index":3130},{"krate":0,"index":3210},{"krate":0,"index":3221},{"krate":0,"index":3219},{"krate":0,"index":3215},{"krate":0,"index":3216},{"krate":0,"index":3212},{"krate":0,"index":3213},{"krate":0,"index":3146},{"krate":0,"index":3198},{"krate":0,"index":3201},{"krate":0,"index":3204},{"krate":0,"index":3207},{"krate":0,"index":3284},{"krate":0,"index":3295},{"krate":0,"index":3293},{"krate":0,"index":3289},{"krate":0,"index":3290},{"krate":0,"index":3286},{"krate":0,"index":3287},{"krate":0,"index":3223},{"krate":0,"index":3275},{"krate":0,"index":3278},{"krate":0,"index":3281},{"krate":0,"index":3358},{"krate":0,"index":3369},{"krate":0,"index":3367},{"krate":0,"index":3363},{"krate":0,"index":3364},{"krate":0,"index":3360},{"krate":0,"index":3361},{"krate":0,"index":3297},{"krate":0,"index":3349},{"krate":0,"index":3352},{"krate":0,"index":3355},{"krate":0,"index":3441},{"krate":0,"index":3452},{"krate":0,"index":3450},{"krate":0,"index":3446},{"krate":0,"index":3447},{"krate":0,"index":3443},{"krate":0,"index":3444},{"krate":0,"index":3371},{"krate":0,"index":3423},{"krate":0,"index":3426},{"krate":0,"index":3429},{"krate":0,"index":3432},{"krate":0,"index":3435},{"krate":0,"index":3438},{"krate":0,"index":3527},{"krate":0,"index":3538},{"krate":0,"index":3536},{"krate":0,"index":3532},{"krate":0,"index":3533},{"krate":0,"index":3529},{"krate":0,"index":3530},{"krate":0,"index":3454},{"krate":0,"index":3506},{"krate":0,"index":3509},{"krate":0,"index":3512},{"krate":0,"index":3515},{"krate":0,"index":3518},{"krate":0,"index":3521},{"krate":0,"index":3524},{"krate":0,"index":3607},{"krate":0,"index":3618},{"krate":0,"index":3616},{"krate":0,"index":3612},{"krate":0,"index":3613},{"krate":0,"index":3609},{"krate":0,"index":3610},{"krate":0,"index":3540},{"krate":0,"index":3592},{"krate":0,"index":3595},{"krate":0,"index":3598},{"krate":0,"index":3601},{"krate":0,"index":3604}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158074,"byte_end":158098,"line_start":3280,"line_end":3280,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3062},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158722,"byte_end":158729,"line_start":3294,"line_end":3294,"column_start":16,"column_end":23},"name":"compile","qualname":"::WebAssembly::compile","value":"fn (buffer_source: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.compile()` function compiles a `WebAssembly.Module`\n from WebAssembly binary code.  This function is useful if it is\n necessary to a compile a module before it can be instantiated\n (otherwise, the `WebAssembly.instantiate()` function should be used).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158163,"byte_end":158178,"line_start":3285,"line_end":3285,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158163,"byte_end":158178,"line_start":3285,"line_end":3285,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3064},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":159129,"byte_end":159147,"line_start":3301,"line_end":3301,"column_start":16,"column_end":34},"name":"instantiate_buffer","qualname":"::WebAssembly::instantiate_buffer","value":"fn (buffer: &[u8], imports: &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiate()` function allows you to compile and\n instantiate WebAssembly code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158163,"byte_end":158178,"line_start":3285,"line_end":3285,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158163,"byte_end":158178,"line_start":3285,"line_end":3285,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3066},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":159555,"byte_end":159573,"line_start":3308,"line_end":3308,"column_start":16,"column_end":34},"name":"instantiate_module","qualname":"::WebAssembly::instantiate_module","value":"fn (module: &Module, imports: &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiate()` function allows you to compile and\n instantiate WebAssembly code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158163,"byte_end":158178,"line_start":3285,"line_end":3285,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158163,"byte_end":158178,"line_start":3285,"line_end":3285,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3068},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":160130,"byte_end":160151,"line_start":3317,"line_end":3317,"column_start":16,"column_end":37},"name":"instantiate_streaming","qualname":"::WebAssembly::instantiate_streaming","value":"fn (response: &Promise, imports: &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiateStreaming()` function compiles and\n instantiates a WebAssembly module directly from a streamed\n underlying source. This is the most efficient, optimized way to load\n wasm code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158163,"byte_end":158178,"line_start":3285,"line_end":3285,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158163,"byte_end":158178,"line_start":3285,"line_end":3285,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3070},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":160636,"byte_end":160644,"line_start":3325,"line_end":3325,"column_start":16,"column_end":24},"name":"validate","qualname":"::WebAssembly::validate","value":"fn (buffer_source: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.validate()` function validates a given typed\n array of WebAssembly binary code, returning whether the bytes\n form a valid wasm module (`true`) or not (`false`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158163,"byte_end":158178,"line_start":3285,"line_end":3285,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":158163,"byte_end":158178,"line_start":3285,"line_end":3285,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3133},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":161254,"byte_end":161266,"line_start":3338,"line_end":3338,"column_start":18,"column_end":30},"name":"CompileError","qualname":"::WebAssembly::CompileError","value":"CompileError {  }","parent":null,"children":[{"krate":0,"index":3134}],"decl_id":null,"docs":" The `WebAssembly.CompileError()` constructor creates a new\n WebAssembly `CompileError` object, which indicates an error during\n WebAssembly decoding or validation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":160739,"byte_end":160754,"line_start":3329,"line_end":3329,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":160739,"byte_end":160754,"line_start":3329,"line_end":3329,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":160739,"byte_end":160754,"line_start":3329,"line_end":3329,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3131},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":161698,"byte_end":161701,"line_start":3346,"line_end":3346,"column_start":16,"column_end":19},"name":"new","qualname":"<CompileError>::new","value":"fn (message: &str) -> CompileError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.CompileError()` constructor creates a new\n WebAssembly `CompileError` object, which indicates an error during\n WebAssembly decoding or validation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":160739,"byte_end":160754,"line_start":3329,"line_end":3329,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":160739,"byte_end":160754,"line_start":3329,"line_end":3329,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3210},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":162351,"byte_end":162359,"line_start":3360,"line_end":3360,"column_start":18,"column_end":26},"name":"Instance","qualname":"::WebAssembly::Instance","value":"Instance {  }","parent":null,"children":[{"krate":0,"index":3211}],"decl_id":null,"docs":" A `WebAssembly.Instance` object is a stateful, executable instance\n of a `WebAssembly.Module`. Instance objects contain all the exported\n WebAssembly functions that allow calling into WebAssembly code from\n JavaScript.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":161773,"byte_end":161788,"line_start":3350,"line_end":3350,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":161773,"byte_end":161788,"line_start":3350,"line_end":3350,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":161773,"byte_end":161788,"line_start":3350,"line_end":3350,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3205},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":162895,"byte_end":162898,"line_start":3369,"line_end":3369,"column_start":16,"column_end":19},"name":"new","qualname":"<Instance>::new","value":"fn (module: &Module, imports: &Object) -> Result<Instance, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Instance()` constructor function can be called to\n synchronously instantiate a given `WebAssembly.Module`\n object. However, the primary way to get an `Instance` is through the\n asynchronous `WebAssembly.instantiateStreaming()` function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":161773,"byte_end":161788,"line_start":3350,"line_end":3350,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":161773,"byte_end":161788,"line_start":3350,"line_end":3350,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3208},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":163492,"byte_end":163499,"line_start":3378,"line_end":3378,"column_start":16,"column_end":23},"name":"exports","qualname":"<Instance>::exports","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `exports` readonly property of the `WebAssembly.Instance` object\n prototype returns an object containing as its members all the\n functions exported from the WebAssembly module instance, to allow\n them to be accessed and used by JavaScript.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":161773,"byte_end":161788,"line_start":3350,"line_end":3350,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":161773,"byte_end":161788,"line_start":3350,"line_end":3350,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3284},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":164098,"byte_end":164107,"line_start":3391,"line_end":3391,"column_start":18,"column_end":27},"name":"LinkError","qualname":"::WebAssembly::LinkError","value":"LinkError {  }","parent":null,"children":[{"krate":0,"index":3285}],"decl_id":null,"docs":" The `WebAssembly.LinkError()` constructor creates a new WebAssembly\n LinkError object, which indicates an error during module\n instantiation (besides traps from the start function).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":163568,"byte_end":163583,"line_start":3382,"line_end":3382,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":163568,"byte_end":163583,"line_start":3382,"line_end":3382,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":163568,"byte_end":163583,"line_start":3382,"line_end":3382,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3282},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":164554,"byte_end":164557,"line_start":3399,"line_end":3399,"column_start":16,"column_end":19},"name":"new","qualname":"<LinkError>::new","value":"fn (message: &str) -> LinkError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.LinkError()` constructor creates a new WebAssembly\n LinkError object, which indicates an error during module\n instantiation (besides traps from the start function).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":163568,"byte_end":163583,"line_start":3382,"line_end":3382,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":163568,"byte_end":163583,"line_start":3382,"line_end":3382,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3358},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":165143,"byte_end":165155,"line_start":3412,"line_end":3412,"column_start":18,"column_end":30},"name":"RuntimeError","qualname":"::WebAssembly::RuntimeError","value":"RuntimeError {  }","parent":null,"children":[{"krate":0,"index":3359}],"decl_id":null,"docs":" The `WebAssembly.RuntimeError()` constructor creates a new WebAssembly\n `RuntimeError` object — the type that is thrown whenever WebAssembly\n specifies a trap.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":164630,"byte_end":164645,"line_start":3403,"line_end":3403,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":164630,"byte_end":164645,"line_start":3403,"line_end":3403,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":164630,"byte_end":164645,"line_start":3403,"line_end":3403,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3356},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":165585,"byte_end":165588,"line_start":3420,"line_end":3420,"column_start":16,"column_end":19},"name":"new","qualname":"<RuntimeError>::new","value":"fn (message: &str) -> RuntimeError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.RuntimeError()` constructor creates a new WebAssembly\n `RuntimeError` object — the type that is thrown whenever WebAssembly\n specifies a trap.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":164630,"byte_end":164645,"line_start":3403,"line_end":3403,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":164630,"byte_end":164645,"line_start":3403,"line_end":3403,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3441},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":166195,"byte_end":166201,"line_start":3433,"line_end":3433,"column_start":18,"column_end":24},"name":"Module","qualname":"::WebAssembly::Module","value":"Module {  }","parent":null,"children":[{"krate":0,"index":3442}],"decl_id":null,"docs":" A `WebAssembly.Module` object contains stateless WebAssembly code\n that has already been compiled by the browser and can be\n efficiently shared with Workers, and instantiated multiple times.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":165658,"byte_end":165673,"line_start":3424,"line_end":3424,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":165658,"byte_end":165673,"line_start":3424,"line_end":3424,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":165658,"byte_end":165673,"line_start":3424,"line_end":3424,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3430},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":166661,"byte_end":166664,"line_start":3441,"line_end":3441,"column_start":16,"column_end":19},"name":"new","qualname":"<Module>::new","value":"fn (buffer_source: &JsValue) -> Result<Module, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" A `WebAssembly.Module` object contains stateless WebAssembly code\n that has already been compiled by the browser and can be\n efficiently shared with Workers, and instantiated multiple times.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":165658,"byte_end":165673,"line_start":3424,"line_end":3424,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":165658,"byte_end":165673,"line_start":3424,"line_end":3424,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3433},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":167181,"byte_end":167196,"line_start":3449,"line_end":3449,"column_start":16,"column_end":31},"name":"custom_sections","qualname":"<Module>::custom_sections","value":"fn (module: &Module, sectionName: &str) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.customSections()` function returns a copy of the\n contents of all custom sections in the given module with the given\n string name.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":165658,"byte_end":165673,"line_start":3424,"line_end":3424,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":165658,"byte_end":165673,"line_start":3424,"line_end":3424,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3436},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":167644,"byte_end":167651,"line_start":3456,"line_end":3456,"column_start":16,"column_end":23},"name":"exports","qualname":"<Module>::exports","value":"fn (module: &Module) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.exports()` function returns an array containing\n descriptions of all the declared exports of the given `Module`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":165658,"byte_end":165673,"line_start":3424,"line_end":3424,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":165658,"byte_end":165673,"line_start":3424,"line_end":3424,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3439},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168080,"byte_end":168087,"line_start":3463,"line_end":3463,"column_start":16,"column_end":23},"name":"imports","qualname":"<Module>::imports","value":"fn (module: &Module) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.imports()` function returns an array containing\n descriptions of all the declared imports of the given `Module`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":165658,"byte_end":165673,"line_start":3424,"line_end":3424,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":165658,"byte_end":165673,"line_start":3424,"line_end":3424,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3527},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168589,"byte_end":168594,"line_start":3475,"line_end":3475,"column_start":18,"column_end":23},"name":"Table","qualname":"::WebAssembly::Table","value":"Table {  }","parent":null,"children":[{"krate":0,"index":3528}],"decl_id":null,"docs":" The `WebAssembly.Table()` constructor creates a new `Table` object\n of the given size and element type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168151,"byte_end":168166,"line_start":3467,"line_end":3467,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168151,"byte_end":168166,"line_start":3467,"line_end":3467,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168151,"byte_end":168166,"line_start":3467,"line_end":3467,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3513},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168955,"byte_end":168958,"line_start":3482,"line_end":3482,"column_start":16,"column_end":19},"name":"new","qualname":"<Table>::new","value":"fn (table_descriptor: &Object) -> Result<Table, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Table()` constructor creates a new `Table` object\n of the given size and element type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168151,"byte_end":168166,"line_start":3467,"line_end":3467,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168151,"byte_end":168166,"line_start":3467,"line_end":3467,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3516},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":169423,"byte_end":169429,"line_start":3490,"line_end":3490,"column_start":16,"column_end":22},"name":"length","qualname":"<Table>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length prototype property of the `WebAssembly.Table` object\n returns the length of the table, i.e. the number of elements in the\n table.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168151,"byte_end":168166,"line_start":3467,"line_end":3467,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168151,"byte_end":168166,"line_start":3467,"line_end":3467,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3519},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":169828,"byte_end":169831,"line_start":3497,"line_end":3497,"column_start":16,"column_end":19},"name":"get","qualname":"<Table>::get","value":"fn (&self, index: u32) -> Result<Function, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `get()` prototype method of the `WebAssembly.Table()` object\n retrieves a function reference stored at a given index.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168151,"byte_end":168166,"line_start":3467,"line_end":3467,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168151,"byte_end":168166,"line_start":3467,"line_end":3467,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3522},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":170298,"byte_end":170302,"line_start":3505,"line_end":3505,"column_start":16,"column_end":20},"name":"grow","qualname":"<Table>::grow","value":"fn (&self, additional_capacity: u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `grow()` prototype method of the `WebAssembly.Table` object\n increases the size of the `Table` instance by a specified number of\n elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168151,"byte_end":168166,"line_start":3467,"line_end":3467,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168151,"byte_end":168166,"line_start":3467,"line_end":3467,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3525},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":170752,"byte_end":170755,"line_start":3512,"line_end":3512,"column_start":16,"column_end":19},"name":"set","qualname":"<Table>::set","value":"fn (&self, index: u32, function: &Function) -> Result<(), JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `set()` prototype method of the `WebAssembly.Table` object mutates a\n reference stored at a given index to a different value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168151,"byte_end":168166,"line_start":3467,"line_end":3467,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":168151,"byte_end":168166,"line_start":3467,"line_end":3467,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3607},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":171164,"byte_end":171170,"line_start":3521,"line_end":3521,"column_start":18,"column_end":24},"name":"Memory","qualname":"::WebAssembly::Memory","value":"Memory {  }","parent":null,"children":[{"krate":0,"index":3608}],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":170864,"byte_end":170879,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":170864,"byte_end":170879,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":170864,"byte_end":170879,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3599},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":171777,"byte_end":171780,"line_start":3532,"line_end":3532,"column_start":16,"column_end":19},"name":"new","qualname":"<Memory>::new","value":"fn (descriptor: &Object) -> Result<Memory, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Memory()` constructor creates a new `Memory` object\n which is a resizable `ArrayBuffer` that holds the raw bytes of\n memory accessed by a WebAssembly `Instance`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":170864,"byte_end":170879,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":170864,"byte_end":170879,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3602},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":172160,"byte_end":172166,"line_start":3539,"line_end":3539,"column_start":16,"column_end":22},"name":"buffer","qualname":"<Memory>::buffer","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" An accessor property that returns the buffer contained in the\n memory.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":170864,"byte_end":170879,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":170864,"byte_end":170879,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3605},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":172731,"byte_end":172735,"line_start":3550,"line_end":3550,"column_start":16,"column_end":20},"name":"grow","qualname":"<Memory>::grow","value":"fn (&self, pages: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `grow()` protoype method of the `Memory` object increases the\n size of the memory instance by a specified number of WebAssembly\n pages.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":170864,"byte_end":170879,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":170864,"byte_end":170879,"line_start":3516,"line_end":3516,"column_start":5,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":94},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":173087,"byte_end":173091,"line_start":3559,"line_end":3559,"column_start":9,"column_end":13},"name":"JSON","qualname":"::JSON","value":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":3620},{"krate":0,"index":3622},{"krate":0,"index":3624},{"krate":0,"index":3626}],"decl_id":null,"docs":" The `JSON` object contains methods for parsing [JavaScript Object\n Notation (JSON)](https://json.org/) and converting values to JSON. It\n can't be called or constructed, and aside from its two method\n properties, it has no interesting functionality of its own.\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":173054,"byte_end":173078,"line_start":3558,"line_end":3558,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3620},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":173507,"byte_end":173512,"line_start":3570,"line_end":3570,"column_start":16,"column_end":21},"name":"parse","qualname":"::JSON::parse","value":"fn (text: &str) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.parse()` method parses a JSON string, constructing the\n JavaScript value or object described by the string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":173129,"byte_end":173144,"line_start":3563,"line_end":3563,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":173129,"byte_end":173144,"line_start":3563,"line_end":3563,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3622},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":173851,"byte_end":173860,"line_start":3576,"line_end":3576,"column_start":16,"column_end":25},"name":"stringify","qualname":"::JSON::stringify","value":"fn (obj: &JsValue) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":173129,"byte_end":173144,"line_start":3563,"line_end":3563,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":173129,"byte_end":173144,"line_start":3563,"line_end":3563,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3624},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":174663,"byte_end":174686,"line_start":3588,"line_end":3588,"column_start":16,"column_end":39},"name":"stringify_with_replacer","qualname":"::JSON::stringify_with_replacer","value":"fn (obj: &JsValue, replacer: &JsValue) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":173129,"byte_end":173144,"line_start":3563,"line_end":3563,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":173129,"byte_end":173144,"line_start":3563,"line_end":3563,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3626},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176203,"byte_end":176236,"line_start":3612,"line_end":3612,"column_start":16,"column_end":49},"name":"stringify_with_replacer_and_space","qualname":"::JSON::stringify_with_replacer_and_space","value":"fn (obj: &JsValue, replacer: &JsValue, space: &JsValue) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":173129,"byte_end":173144,"line_start":3563,"line_end":3563,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":173129,"byte_end":173144,"line_start":3563,"line_end":3563,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3867},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176555,"byte_end":176563,"line_start":3626,"line_end":3626,"column_start":14,"column_end":22},"name":"JsString","qualname":"::JsString","value":"JsString {  }","parent":null,"children":[{"krate":0,"index":3868}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3688},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176868,"byte_end":176874,"line_start":3633,"line_end":3633,"column_start":12,"column_end":18},"name":"length","qualname":"<JsString>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property of a String object indicates the length of a string,\n in UTF-16 code units.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3691},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":177285,"byte_end":177292,"line_start":3641,"line_end":3641,"column_start":12,"column_end":19},"name":"char_at","qualname":"<JsString>::char_at","value":"fn (&self, index: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The String object's `charAt()` method returns a new string consisting of\n the single UTF-16 code unit located at the specified offset into the\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3694},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":178119,"byte_end":178131,"line_start":3655,"line_end":3655,"column_start":12,"column_end":24},"name":"char_code_at","qualname":"<JsString>::char_code_at","value":"fn (&self, index: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `charCodeAt()` method returns an integer between 0 and 65535\n representing the UTF-16 code unit at the given index (the UTF-16 code\n unit matches the Unicode code point for code points representable in a\n single UTF-16 code unit, but might also be the first code unit of a\n surrogate pair for code points not representable in a single UTF-16 code\n unit, e.g. Unicode code points > 0x10000).  If you want the entire code\n point value, use `codePointAt()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3697},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":178502,"byte_end":178515,"line_start":3662,"line_end":3662,"column_start":12,"column_end":25},"name":"code_point_at","qualname":"<JsString>::code_point_at","value":"fn (&self, pos: u32) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `codePointAt()` method returns a non-negative integer that is the\n Unicode code point value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3700},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":178868,"byte_end":178874,"line_start":3669,"line_end":3669,"column_start":12,"column_end":18},"name":"concat","qualname":"<JsString>::concat","value":"fn (&self, string_2: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `concat()` method concatenates the string arguments to the calling\n string and returns a new string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3703},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":179296,"byte_end":179305,"line_start":3676,"line_end":3676,"column_start":12,"column_end":21},"name":"ends_with","qualname":"<JsString>::ends_with","value":"fn (&self, search_string: &str, length: i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `endsWith()` method determines whether a string ends with the characters of a\n specified string, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3706},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":180148,"byte_end":180162,"line_start":3692,"line_end":3692,"column_start":12,"column_end":26},"name":"from_char_code","qualname":"<JsString>::from_char_code","value":"fn (char_codes: &[u16]) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The static `String.fromCharCode()` method returns a string created from\n the specified sequence of UTF-16 code units.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3709},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":180432,"byte_end":180447,"line_start":3696,"line_end":3696,"column_start":12,"column_end":27},"name":"from_char_code1","qualname":"<JsString>::from_char_code1","value":"fn (a: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3712},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":180705,"byte_end":180720,"line_start":3700,"line_end":3700,"column_start":12,"column_end":27},"name":"from_char_code2","qualname":"<JsString>::from_char_code2","value":"fn (a: u32, b: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3715},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":180986,"byte_end":181001,"line_start":3704,"line_end":3704,"column_start":12,"column_end":27},"name":"from_char_code3","qualname":"<JsString>::from_char_code3","value":"fn (a: u32, b: u32, c: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3718},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":181275,"byte_end":181290,"line_start":3708,"line_end":3708,"column_start":12,"column_end":27},"name":"from_char_code4","qualname":"<JsString>::from_char_code4","value":"fn (a: u32, b: u32, c: u32, d: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3721},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":181572,"byte_end":181587,"line_start":3712,"line_end":3712,"column_start":12,"column_end":27},"name":"from_char_code5","qualname":"<JsString>::from_char_code5","value":"fn (a: u32, b: u32, c: u32, d: u32, e: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3724},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":182324,"byte_end":182339,"line_start":3728,"line_end":3728,"column_start":12,"column_end":27},"name":"from_code_point","qualname":"<JsString>::from_code_point","value":"fn (code_points: &[u32]) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `String.fromCodePoint()` method returns a string created by\n using the specified sequence of code points.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3727},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":182636,"byte_end":182652,"line_start":3732,"line_end":3732,"column_start":12,"column_end":28},"name":"from_code_point1","qualname":"<JsString>::from_code_point1","value":"fn (a: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3730},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":182936,"byte_end":182952,"line_start":3736,"line_end":3736,"column_start":12,"column_end":28},"name":"from_code_point2","qualname":"<JsString>::from_code_point2","value":"fn (a: u32, b: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3733},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":183244,"byte_end":183260,"line_start":3740,"line_end":3740,"column_start":12,"column_end":28},"name":"from_code_point3","qualname":"<JsString>::from_code_point3","value":"fn (a: u32, b: u32, c: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3736},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":183560,"byte_end":183576,"line_start":3744,"line_end":3744,"column_start":12,"column_end":28},"name":"from_code_point4","qualname":"<JsString>::from_code_point4","value":"fn (a: u32, b: u32, c: u32, d: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3739},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":183884,"byte_end":183900,"line_start":3748,"line_end":3748,"column_start":12,"column_end":28},"name":"from_code_point5","qualname":"<JsString>::from_code_point5","value":"fn (a: u32, b: u32, c: u32, d: u32, e: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3742},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":184312,"byte_end":184320,"line_start":3755,"line_end":3755,"column_start":12,"column_end":20},"name":"includes","qualname":"<JsString>::includes","value":"fn (&self, search_string: &str, position: i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `includes()` method determines whether one string may be found\n within another string, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3745},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":184815,"byte_end":184823,"line_start":3763,"line_end":3763,"column_start":12,"column_end":20},"name":"index_of","qualname":"<JsString>::index_of","value":"fn (&self, search_value: &str, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `indexOf()` method returns the index within the calling String\n object of the first occurrence of the specified value, starting the\n search at fromIndex.  Returns -1 if the value is not found.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3748},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":185331,"byte_end":185344,"line_start":3771,"line_end":3771,"column_start":12,"column_end":25},"name":"last_index_of","qualname":"<JsString>::last_index_of","value":"fn (&self, search_value: &str, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `lastIndexOf()` method returns the index within the calling String\n object of the last occurrence of the specified value, searching\n backwards from fromIndex.  Returns -1 if the value is not found.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3751},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":185812,"byte_end":185826,"line_start":3779,"line_end":3779,"column_start":12,"column_end":26},"name":"locale_compare","qualname":"<JsString>::locale_compare","value":"fn (&self, compare_string: &str, locales: &Array, options: &Object) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `localeCompare()` method returns a number indicating whether\n a reference string comes before or after or is the same as\n the given string in sort order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3754},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":186261,"byte_end":186267,"line_start":3790,"line_end":3790,"column_start":12,"column_end":18},"name":"match_","qualname":"<JsString>::match_","value":"fn (&self, pattern: &RegExp) -> Option<Object>","parent":null,"children":[],"decl_id":null,"docs":" The `match()` method retrieves the matches when matching a string against a regular expression.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3757},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":186682,"byte_end":186691,"line_start":3797,"line_end":3797,"column_start":12,"column_end":21},"name":"normalize","qualname":"<JsString>::normalize","value":"fn (&self, form: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `normalize()` method returns the Unicode Normalization Form\n of a given string (if the value isn't a string, it will be converted to one first).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3760},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":187185,"byte_end":187192,"line_start":3806,"line_end":3806,"column_start":12,"column_end":19},"name":"pad_end","qualname":"<JsString>::pad_end","value":"fn (&self, target_length: u32, pad_string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `padEnd()` method pads the current string with a given string\n (repeated, if needed) so that the resulting string reaches a given\n length. The padding is applied from the end (right) of the current\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3763},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":187721,"byte_end":187730,"line_start":3815,"line_end":3815,"column_start":12,"column_end":21},"name":"pad_start","qualname":"<JsString>::pad_start","value":"fn (&self, target_length: u32, pad_string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `padStart()` method pads the current string with another string\n (repeated, if needed) so that the resulting string reaches the given\n length. The padding is applied from the start (left) of the current\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3766},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":188173,"byte_end":188179,"line_start":3822,"line_end":3822,"column_start":12,"column_end":18},"name":"repeat","qualname":"<JsString>::repeat","value":"fn (&self, count: i32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `repeat()` method constructs and returns a new string which contains the specified\n number of copies of the string on which it was called, concatenated together.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3769},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":188734,"byte_end":188741,"line_start":3832,"line_end":3832,"column_start":12,"column_end":19},"name":"replace","qualname":"<JsString>::replace","value":"fn (&self, pattern: &str, replacement: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `replace()` method returns a new string with some or all matches of a pattern\n replaced by a replacement. The pattern can be a string or a RegExp, and\n the replacement can be a string or a function to be called for each match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3772},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":189011,"byte_end":189032,"line_start":3836,"line_end":3836,"column_start":12,"column_end":33},"name":"replace_with_function","qualname":"<JsString>::replace_with_function","value":"fn (&self, pattern: &str, replacement: &Function) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3775},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":189213,"byte_end":189231,"line_start":3843,"line_end":3843,"column_start":12,"column_end":30},"name":"replace_by_pattern","qualname":"<JsString>::replace_by_pattern","value":"fn (&self, pattern: &RegExp, replacement: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3778},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":189504,"byte_end":189536,"line_start":3847,"line_end":3847,"column_start":12,"column_end":44},"name":"replace_by_pattern_with_function","qualname":"<JsString>::replace_by_pattern_with_function","value":"fn (&self, pattern: &RegExp, replacement: &Function) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3781},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":189954,"byte_end":189960,"line_start":3858,"line_end":3858,"column_start":12,"column_end":18},"name":"search","qualname":"<JsString>::search","value":"fn (&self, pattern: &RegExp) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `search()` method executes a search for a match between\n a regular expression and this String object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3784},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":190335,"byte_end":190340,"line_start":3865,"line_end":3865,"column_start":12,"column_end":17},"name":"slice","qualname":"<JsString>::slice","value":"fn (&self, start: u32, end: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method extracts a section of a string and returns it as a\n new string, without modifying the original string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3787},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":190786,"byte_end":190791,"line_start":3872,"line_end":3872,"column_start":12,"column_end":17},"name":"split","qualname":"<JsString>::split","value":"fn (&self, separator: &str) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `split()` method splits a String object into an array of strings by separating the string\n into substrings, using a specified separator string to determine where to make each split.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3790},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":191037,"byte_end":191048,"line_start":3876,"line_end":3876,"column_start":12,"column_end":23},"name":"split_limit","qualname":"<JsString>::split_limit","value":"fn (&self, separator: &str, limit: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3793},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":191306,"byte_end":191322,"line_start":3880,"line_end":3880,"column_start":12,"column_end":28},"name":"split_by_pattern","qualname":"<JsString>::split_by_pattern","value":"fn (&self, pattern: &RegExp) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3796},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":191569,"byte_end":191591,"line_start":3884,"line_end":3884,"column_start":12,"column_end":34},"name":"split_by_pattern_limit","qualname":"<JsString>::split_by_pattern_limit","value":"fn (&self, pattern: &RegExp, limit: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3799},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":192036,"byte_end":192047,"line_start":3892,"line_end":3892,"column_start":12,"column_end":23},"name":"starts_with","qualname":"<JsString>::starts_with","value":"fn (&self, search_string: &str, position: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `startsWith()` method determines whether a string begins with the\n characters of a specified string, returning true or false as\n appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3802},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":192442,"byte_end":192451,"line_start":3899,"line_end":3899,"column_start":12,"column_end":21},"name":"substring","qualname":"<JsString>::substring","value":"fn (&self, index_start: u32, index_end: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `substring()` method returns the part of the string between the\n start and end indexes, or to the end of the string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3805},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":192837,"byte_end":192843,"line_start":3906,"line_end":3906,"column_start":12,"column_end":18},"name":"substr","qualname":"<JsString>::substr","value":"fn (&self, start: i32, length: i32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `substr()` method returns the part of a string between\n the start index and a number of characters after it.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3808},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":193287,"byte_end":193307,"line_start":3913,"line_end":3913,"column_start":12,"column_end":32},"name":"to_locale_lower_case","qualname":"<JsString>::to_locale_lower_case","value":"fn (&self, locale: Option<&str>) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleLowerCase()` method returns the calling string value converted to lower case,\n according to any locale-specific case mappings.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3811},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":193745,"byte_end":193765,"line_start":3920,"line_end":3920,"column_start":12,"column_end":32},"name":"to_locale_upper_case","qualname":"<JsString>::to_locale_upper_case","value":"fn (&self, locale: Option<&str>) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleUpperCase()` method returns the calling string value converted to upper case,\n according to any locale-specific case mappings.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3814},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":194140,"byte_end":194153,"line_start":3927,"line_end":3927,"column_start":12,"column_end":25},"name":"to_lower_case","qualname":"<JsString>::to_lower_case","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLowerCase()` method returns the calling string value\n converted to lower case.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3817},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":194491,"byte_end":194500,"line_start":3934,"line_end":3934,"column_start":12,"column_end":21},"name":"to_string","qualname":"<JsString>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3820},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":194910,"byte_end":194923,"line_start":3941,"line_end":3941,"column_start":12,"column_end":25},"name":"to_upper_case","qualname":"<JsString>::to_upper_case","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toUpperCase()` method returns the calling string value converted to\n uppercase (the value will be converted to a string if it isn't one).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3823},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":195394,"byte_end":195398,"line_start":3950,"line_end":3950,"column_start":12,"column_end":16},"name":"trim","qualname":"<JsString>::trim","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trim()` method removes whitespace from both ends of a string.\n Whitespace in this context is all the whitespace characters (space, tab,\n no-break space, etc.) and all the line terminator characters (LF, CR,\n etc.).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3826},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":195768,"byte_end":195776,"line_start":3957,"line_end":3957,"column_start":12,"column_end":20},"name":"trim_end","qualname":"<JsString>::trim_end","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimEnd()` method removes whitespace from the end of a string.\n `trimRight()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3829},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":196148,"byte_end":196158,"line_start":3964,"line_end":3964,"column_start":12,"column_end":22},"name":"trim_right","qualname":"<JsString>::trim_right","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimEnd()` method removes whitespace from the end of a string.\n `trimRight()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3832},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":196539,"byte_end":196549,"line_start":3971,"line_end":3971,"column_start":12,"column_end":22},"name":"trim_start","qualname":"<JsString>::trim_start","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimStart()` method removes whitespace from the beginning of a\n string. `trimLeft()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3835},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":196929,"byte_end":196938,"line_start":3978,"line_end":3978,"column_start":12,"column_end":21},"name":"trim_left","qualname":"<JsString>::trim_left","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimStart()` method removes whitespace from the beginning of a\n string. `trimLeft()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3838},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":197263,"byte_end":197271,"line_start":3984,"line_end":3984,"column_start":12,"column_end":20},"name":"value_of","qualname":"<JsString>::value_of","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of a `String` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3841},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":197693,"byte_end":197696,"line_start":3991,"line_end":3991,"column_start":12,"column_end":15},"name":"raw","qualname":"<JsString>::raw","value":"fn (call_site: &Object, substitutions: &Array) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3844},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":198166,"byte_end":198171,"line_start":3998,"line_end":3998,"column_start":12,"column_end":17},"name":"raw_0","qualname":"<JsString>::raw_0","value":"fn (call_site: &Object) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3847},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":198618,"byte_end":198623,"line_start":4005,"line_end":4005,"column_start":12,"column_end":17},"name":"raw_1","qualname":"<JsString>::raw_1","value":"fn (call_site: &Object, substitutions_1: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3850},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":199093,"byte_end":199098,"line_start":4012,"line_end":4012,"column_start":12,"column_end":17},"name":"raw_2","qualname":"<JsString>::raw_2","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3853},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":199622,"byte_end":199627,"line_start":4023,"line_end":4023,"column_start":12,"column_end":17},"name":"raw_3","qualname":"<JsString>::raw_3","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3856},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":200182,"byte_end":200187,"line_start":4035,"line_end":4035,"column_start":12,"column_end":17},"name":"raw_4","qualname":"<JsString>::raw_4","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3859},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":200773,"byte_end":200778,"line_start":4048,"line_end":4048,"column_start":12,"column_end":17},"name":"raw_5","qualname":"<JsString>::raw_5","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str, substitutions_5: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3862},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":201395,"byte_end":201400,"line_start":4062,"line_end":4062,"column_start":12,"column_end":17},"name":"raw_6","qualname":"<JsString>::raw_6","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str, substitutions_5: &str, substitutions_6: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3865},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":202048,"byte_end":202053,"line_start":4077,"line_end":4077,"column_start":12,"column_end":17},"name":"raw_7","qualname":"<JsString>::raw_7","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str, substitutions_5: &str, substitutions_6: &str, substitutions_7: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":176388,"byte_end":176403,"line_start":3622,"line_end":3622,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":202646,"byte_end":202654,"line_start":4096,"line_end":4096,"column_start":12,"column_end":20},"name":"try_from","qualname":"<JsString>::try_from","value":"fn (val: &JsValue) -> Option<&JsString>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `JsString` value of this JS value if it's an instance of a\n string.","sig":null,"attributes":[{"value":"deprecated(note =\n             \"recommended to use dyn_ref instead which is now equivalent\")","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":202552,"byte_end":202634,"line_start":4095,"line_end":4095,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":203579,"byte_end":203593,"line_start":4116,"line_end":4116,"column_start":12,"column_end":26},"name":"is_valid_utf16","qualname":"<JsString>::is_valid_utf16","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this string is a valid UTF-16 string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":203931,"byte_end":203935,"line_start":4125,"line_end":4125,"column_start":12,"column_end":16},"name":"iter","qualname":"<JsString>::iter","value":"fn <'a> (&'a self) -> impl ExactSizeIterator<Item = u16> + DoubleEndedIterator<Item = u16> + 'a","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the `u16` character codes that make up this JS\n string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":204704,"byte_end":204711,"line_start":4141,"line_end":4141,"column_start":12,"column_end":19},"name":"as_char","qualname":"<JsString>::as_char","value":"fn (&self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" If this string consists of a single Unicode code point, then this method\n converts it into a Rust `char` without doing any allocations.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3979},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206645,"byte_end":206651,"line_start":4228,"line_end":4228,"column_start":14,"column_end":20},"name":"Symbol","qualname":"::Symbol","value":"Symbol {  }","parent":null,"children":[{"krate":0,"index":3980}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3932},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":207113,"byte_end":207125,"line_start":4236,"line_end":4236,"column_start":12,"column_end":24},"name":"has_instance","qualname":"<Symbol>::has_instance","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.hasInstance` well-known symbol is used to determine\n if a constructor object recognizes an object as its instance.\n The `instanceof` operator's behavior can be customized by this symbol.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3935},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":207592,"byte_end":207612,"line_start":4244,"line_end":4244,"column_start":12,"column_end":32},"name":"is_concat_spreadable","qualname":"<Symbol>::is_concat_spreadable","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.isConcatSpreadable` well-known symbol is used to configure\n if an object should be flattened to its array elements when using the\n `Array.prototype.concat()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3938},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":208087,"byte_end":208101,"line_start":4251,"line_end":4251,"column_start":12,"column_end":26},"name":"async_iterator","qualname":"<Symbol>::async_iterator","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.asyncIterator` well-known symbol specifies the default AsyncIterator for an object.\n If this property is set on an object, it is an async iterable and can be used in a `for await...of` loop.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3941},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":208451,"byte_end":208459,"line_start":4258,"line_end":4258,"column_start":12,"column_end":20},"name":"iterator","qualname":"<Symbol>::iterator","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.iterator` well-known symbol specifies the default iterator\n for an object.  Used by `for...of`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3944},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":208892,"byte_end":208898,"line_start":4266,"line_end":4266,"column_start":12,"column_end":18},"name":"match_","qualname":"<Symbol>::match_","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.match` well-known symbol specifies the matching of a regular\n expression against a string. This function is called by the\n `String.prototype.match()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3947},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":209439,"byte_end":209446,"line_start":4277,"line_end":4277,"column_start":12,"column_end":19},"name":"replace","qualname":"<Symbol>::replace","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.replace` well-known symbol specifies the method that\n replaces matched substrings of a string.  This function is called by the\n `String.prototype.replace()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3950},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":210012,"byte_end":210018,"line_start":4288,"line_end":4288,"column_start":12,"column_end":18},"name":"search","qualname":"<Symbol>::search","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.search` well-known symbol specifies the method that returns\n the index within a string that matches the regular expression.  This\n function is called by the `String.prototype.search()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3953},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":210398,"byte_end":210405,"line_start":4295,"line_end":4295,"column_start":12,"column_end":19},"name":"species","qualname":"<Symbol>::species","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The well-known symbol `Symbol.species` specifies a function-valued\n property that the constructor function uses to create derived objects.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3956},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":210951,"byte_end":210956,"line_start":4305,"line_end":4305,"column_start":12,"column_end":17},"name":"split","qualname":"<Symbol>::split","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.split` well-known symbol specifies the method that splits a\n string at the indices that match a regular expression.  This function is\n called by the `String.prototype.split()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3959},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":211384,"byte_end":211396,"line_start":4313,"line_end":4313,"column_start":12,"column_end":24},"name":"to_primitive","qualname":"<Symbol>::to_primitive","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.toPrimitive` is a symbol that specifies a function valued\n property that is called to convert an object to a corresponding\n primitive value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3962},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":211898,"byte_end":211911,"line_start":4322,"line_end":4322,"column_start":12,"column_end":25},"name":"to_string_tag","qualname":"<Symbol>::to_string_tag","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.toStringTag` well-known symbol is a string valued property\n that is used in the creation of the default string description of an\n object.  It is accessed internally by the `Object.prototype.toString()`\n method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3965},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":212370,"byte_end":212374,"line_start":4330,"line_end":4330,"column_start":12,"column_end":16},"name":"for_","qualname":"<Symbol>::for_","value":"fn (key: &str) -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.for(key)` method searches for existing symbols in a runtime-wide symbol registry with\n the given key and returns it if found.\n Otherwise a new symbol gets created in the global symbol registry with this key.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3968},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":212730,"byte_end":212737,"line_start":4336,"line_end":4336,"column_start":12,"column_end":19},"name":"key_for","qualname":"<Symbol>::key_for","value":"fn (sym: &Symbol) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.keyFor(sym)` method retrieves a shared symbol key from the global symbol registry for the given symbol.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3971},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":213049,"byte_end":213058,"line_start":4342,"line_end":4342,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Symbol>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified Symbol object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3974},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":213521,"byte_end":213532,"line_start":4350,"line_end":4350,"column_start":12,"column_end":23},"name":"unscopables","qualname":"<Symbol>::unscopables","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.unscopables` well-known symbol is used to specify an object\n value of whose own and inherited property names are excluded from the\n with environment bindings of the associated object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3977},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":213817,"byte_end":213825,"line_start":4356,"line_end":4356,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Symbol>::value_of","value":"fn (&self) -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of a Symbol object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206522,"byte_end":206537,"line_start":4224,"line_end":4224,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":129},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":213888,"byte_end":213892,"line_start":4360,"line_end":4360,"column_start":9,"column_end":13},"name":"Intl","qualname":"::Intl","value":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":3985},{"krate":0,"index":4057},{"krate":0,"index":4061},{"krate":0,"index":4059},{"krate":0,"index":3987},{"krate":0,"index":4039},{"krate":0,"index":4042},{"krate":0,"index":4045},{"krate":0,"index":4048},{"krate":0,"index":4051},{"krate":0,"index":4054},{"krate":0,"index":4136},{"krate":0,"index":4140},{"krate":0,"index":4138},{"krate":0,"index":4063},{"krate":0,"index":4115},{"krate":0,"index":4118},{"krate":0,"index":4121},{"krate":0,"index":4124},{"krate":0,"index":4127},{"krate":0,"index":4130},{"krate":0,"index":4133},{"krate":0,"index":4215},{"krate":0,"index":4219},{"krate":0,"index":4217},{"krate":0,"index":4142},{"krate":0,"index":4194},{"krate":0,"index":4197},{"krate":0,"index":4200},{"krate":0,"index":4203},{"krate":0,"index":4206},{"krate":0,"index":4209},{"krate":0,"index":4212},{"krate":0,"index":4291},{"krate":0,"index":4295},{"krate":0,"index":4293},{"krate":0,"index":4221},{"krate":0,"index":4273},{"krate":0,"index":4276},{"krate":0,"index":4279},{"krate":0,"index":4282},{"krate":0,"index":4285},{"krate":0,"index":4288}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":213855,"byte_end":213879,"line_start":4359,"line_end":4359,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3985},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":214432,"byte_end":214453,"line_start":4372,"line_end":4372,"column_start":16,"column_end":37},"name":"get_canonical_locales","qualname":"::Intl::get_canonical_locales","value":"fn (s: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.getCanonicalLocales()` method returns an array containing\n the canonical locale names. Duplicates will be omitted and elements\n will be validated as structurally valid language tags.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":213930,"byte_end":213945,"line_start":4364,"line_end":4364,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":213930,"byte_end":213945,"line_start":4364,"line_end":4364,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4057},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":214930,"byte_end":214938,"line_start":4384,"line_end":4384,"column_start":18,"column_end":26},"name":"Collator","qualname":"::Intl::Collator","value":"Collator {  }","parent":null,"children":[{"krate":0,"index":4058}],"decl_id":null,"docs":" The `Intl.Collator` object is a constructor for collators, objects\n that enable language sensitive string comparison.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":214509,"byte_end":214524,"line_start":4376,"line_end":4376,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":214509,"byte_end":214524,"line_start":4376,"line_end":4376,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":214509,"byte_end":214524,"line_start":4376,"line_end":4376,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4046},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":215290,"byte_end":215293,"line_start":4391,"line_end":4391,"column_start":16,"column_end":19},"name":"new","qualname":"<Collator>::new","value":"fn (locales: &Array, options: &Object) -> Collator","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.Collator` object is a constructor for collators, objects\n that enable language sensitive string comparison.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":214509,"byte_end":214524,"line_start":4376,"line_end":4376,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":214509,"byte_end":214524,"line_start":4376,"line_end":4376,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4049},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":215748,"byte_end":215755,"line_start":4399,"line_end":4399,"column_start":16,"column_end":23},"name":"compare","qualname":"<Collator>::compare","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.Collator.prototype.compare property returns a function that\n compares two strings according to the sort order of this Collator\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":214509,"byte_end":214524,"line_start":4376,"line_end":4376,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":214509,"byte_end":214524,"line_start":4376,"line_end":4376,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4052},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216261,"byte_end":216277,"line_start":4407,"line_end":4407,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<Collator>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.Collator.prototype.resolvedOptions()` method returns a new\n object with properties reflecting the locale and collation options\n computed during initialization of this Collator object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":214509,"byte_end":214524,"line_start":4376,"line_end":4376,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":214509,"byte_end":214524,"line_start":4376,"line_end":4376,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4055},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216827,"byte_end":216847,"line_start":4416,"line_end":4416,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<Collator>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.Collator.supportedLocalesOf()` method returns an array\n containing those of the provided locales that are supported in\n collation without having to fall back to the runtime's default\n locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":214509,"byte_end":214524,"line_start":4376,"line_end":4376,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":214509,"byte_end":214524,"line_start":4376,"line_end":4376,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4136},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":217360,"byte_end":217374,"line_start":4428,"line_end":4428,"column_start":18,"column_end":32},"name":"DateTimeFormat","qualname":"::Intl::DateTimeFormat","value":"DateTimeFormat {  }","parent":null,"children":[{"krate":0,"index":4137}],"decl_id":null,"docs":" The `Intl.DateTimeFormat` object is a constructor for objects\n that enable language-sensitive date and time formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216931,"byte_end":216946,"line_start":4420,"line_end":4420,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216931,"byte_end":216946,"line_start":4420,"line_end":4420,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216931,"byte_end":216946,"line_start":4420,"line_end":4420,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4122},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":217734,"byte_end":217737,"line_start":4435,"line_end":4435,"column_start":16,"column_end":19},"name":"new","qualname":"<DateTimeFormat>::new","value":"fn (locales: &Array, options: &Object) -> DateTimeFormat","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.DateTimeFormat` object is a constructor for objects\n that enable language-sensitive date and time formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216931,"byte_end":216946,"line_start":4420,"line_end":4420,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216931,"byte_end":216946,"line_start":4420,"line_end":4420,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4125},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":218245,"byte_end":218251,"line_start":4443,"line_end":4443,"column_start":16,"column_end":22},"name":"format","qualname":"<DateTimeFormat>::format","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.DateTimeFormat.prototype.format property returns a getter function that\n formats a date according to the locale and formatting options of this\n Intl.DateTimeFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216931,"byte_end":216946,"line_start":4420,"line_end":4420,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216931,"byte_end":216946,"line_start":4420,"line_end":4420,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4128},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":218714,"byte_end":218729,"line_start":4450,"line_end":4450,"column_start":16,"column_end":31},"name":"format_to_parts","qualname":"<DateTimeFormat>::format_to_parts","value":"fn (&self, date: &Date) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.DateTimeFormat.prototype.formatToParts()` method allows locale-aware\n formatting of strings produced by DateTimeFormat formatters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216931,"byte_end":216946,"line_start":4420,"line_end":4420,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216931,"byte_end":216946,"line_start":4420,"line_end":4420,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4131},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219284,"byte_end":219300,"line_start":4458,"line_end":4458,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<DateTimeFormat>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.DateTimeFormat.prototype.resolvedOptions()` method returns a new\n object with properties reflecting the locale and date and time formatting\n options computed during initialization of this DateTimeFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216931,"byte_end":216946,"line_start":4420,"line_end":4420,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216931,"byte_end":216946,"line_start":4420,"line_end":4420,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4134},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219889,"byte_end":219909,"line_start":4467,"line_end":4467,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<DateTimeFormat>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.DateTimeFormat.supportedLocalesOf()` method returns an array\n containing those of the provided locales that are supported in date\n and time formatting without having to fall back to the runtime's default\n locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216931,"byte_end":216946,"line_start":4420,"line_end":4420,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":216931,"byte_end":216946,"line_start":4420,"line_end":4420,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4215},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":220409,"byte_end":220421,"line_start":4479,"line_end":4479,"column_start":18,"column_end":30},"name":"NumberFormat","qualname":"::Intl::NumberFormat","value":"NumberFormat {  }","parent":null,"children":[{"krate":0,"index":4216}],"decl_id":null,"docs":" The `Intl.NumberFormat` object is a constructor for objects\n that enable language sensitive number formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219991,"byte_end":220006,"line_start":4471,"line_end":4471,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219991,"byte_end":220006,"line_start":4471,"line_end":4471,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219991,"byte_end":220006,"line_start":4471,"line_end":4471,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4201},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":220770,"byte_end":220773,"line_start":4486,"line_end":4486,"column_start":16,"column_end":19},"name":"new","qualname":"<NumberFormat>::new","value":"fn (locales: &Array, options: &Object) -> NumberFormat","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.NumberFormat` object is a constructor for objects\n that enable language sensitive number formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219991,"byte_end":220006,"line_start":4471,"line_end":4471,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219991,"byte_end":220006,"line_start":4471,"line_end":4471,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4204},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":221268,"byte_end":221274,"line_start":4494,"line_end":4494,"column_start":16,"column_end":22},"name":"format","qualname":"<NumberFormat>::format","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.NumberFormat.prototype.format property returns a getter function that\n formats a number according to the locale and formatting options of this\n NumberFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219991,"byte_end":220006,"line_start":4471,"line_end":4471,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219991,"byte_end":220006,"line_start":4471,"line_end":4471,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4207},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":221731,"byte_end":221746,"line_start":4501,"line_end":4501,"column_start":16,"column_end":31},"name":"format_to_parts","qualname":"<NumberFormat>::format_to_parts","value":"fn (&self, number: f64) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.Numberformat.prototype.formatToParts()` method allows locale-aware\n formatting of strings produced by NumberTimeFormat formatters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219991,"byte_end":220006,"line_start":4471,"line_end":4471,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219991,"byte_end":220006,"line_start":4471,"line_end":4471,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4210},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":222286,"byte_end":222302,"line_start":4509,"line_end":4509,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<NumberFormat>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.NumberFormat.prototype.resolvedOptions()` method returns a new\n object with properties reflecting the locale and number formatting\n options computed during initialization of this NumberFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219991,"byte_end":220006,"line_start":4471,"line_end":4471,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219991,"byte_end":220006,"line_start":4471,"line_end":4471,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4213},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":222864,"byte_end":222884,"line_start":4517,"line_end":4517,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<NumberFormat>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.NumberFormat.supportedLocalesOf()` method returns an array\n containing those of the provided locales that are supported in number\n formatting without having to fall back to the runtime's default locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219991,"byte_end":220006,"line_start":4471,"line_end":4471,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":219991,"byte_end":220006,"line_start":4471,"line_end":4471,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4291},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":223398,"byte_end":223409,"line_start":4529,"line_end":4529,"column_start":18,"column_end":29},"name":"PluralRules","qualname":"::Intl::PluralRules","value":"PluralRules {  }","parent":null,"children":[{"krate":0,"index":4292}],"decl_id":null,"docs":" The `Intl.PluralRules` object is a constructor for objects\n that enable plural sensitive formatting and plural language rules.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":222965,"byte_end":222980,"line_start":4521,"line_end":4521,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":222965,"byte_end":222980,"line_start":4521,"line_end":4521,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":222965,"byte_end":222980,"line_start":4521,"line_end":4521,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4280},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":223773,"byte_end":223776,"line_start":4536,"line_end":4536,"column_start":16,"column_end":19},"name":"new","qualname":"<PluralRules>::new","value":"fn (locales: &Array, options: &Object) -> PluralRules","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.PluralRules` object is a constructor for objects\n that enable plural sensitive formatting and plural language rules.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":222965,"byte_end":222980,"line_start":4521,"line_end":4521,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":222965,"byte_end":222980,"line_start":4521,"line_end":4521,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4283},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":224320,"byte_end":224336,"line_start":4544,"line_end":4544,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<PluralRules>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.PluralRules.prototype.resolvedOptions()` method returns a new\n object with properties reflecting the locale and plural formatting\n options computed during initialization of this PluralRules object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":222965,"byte_end":222980,"line_start":4521,"line_end":4521,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":222965,"byte_end":222980,"line_start":4521,"line_end":4521,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4286},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":224737,"byte_end":224743,"line_start":4551,"line_end":4551,"column_start":16,"column_end":22},"name":"select","qualname":"<PluralRules>::select","value":"fn (&self, number: f64) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.PluralRules.prototype.select()` method returns a String indicating\n which plural rule to use for locale-aware formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":222965,"byte_end":222980,"line_start":4521,"line_end":4521,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":222965,"byte_end":222980,"line_start":4521,"line_end":4521,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4289},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225316,"byte_end":225336,"line_start":4559,"line_end":4559,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<PluralRules>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.PluralRules.supportedLocalesOf()` method returns an array\n containing those of the provided locales that are supported in plural\n formatting without having to fall back to the runtime's default locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":222965,"byte_end":222980,"line_start":4521,"line_end":4521,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":222965,"byte_end":222980,"line_start":4521,"line_end":4521,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4382},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225792,"byte_end":225799,"line_start":4573,"line_end":4573,"column_start":14,"column_end":21},"name":"Promise","qualname":"::Promise","value":"Promise {  }","parent":null,"children":[{"krate":0,"index":4383}],"decl_id":null,"docs":" The `Promise` object represents the eventual completion (or failure) of\n an asynchronous operation, and its resulting value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}},{"value":"must_use","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225701,"byte_end":225712,"line_start":4570,"line_end":4570,"column_start":5,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4356},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":226829,"byte_end":226832,"line_start":4592,"line_end":4592,"column_start":12,"column_end":15},"name":"new","qualname":"<Promise>::new","value":"fn (cb: &mut dyn FnMut(Function, Function)) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Promise` with the provided executor `cb`","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4359},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":227361,"byte_end":227364,"line_start":4601,"line_end":4601,"column_start":12,"column_end":15},"name":"all","qualname":"<Promise>::all","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.all(iterable)` method returns a single `Promise` that\n resolves when all of the promises in the iterable argument have resolved\n or when the iterable argument contains no promises. It rejects with the\n reason of the first promise that rejects.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4362},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":227798,"byte_end":227802,"line_start":4609,"line_end":4609,"column_start":12,"column_end":16},"name":"race","qualname":"<Promise>::race","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.race(iterable)` method returns a promise that resolves or\n rejects as soon as one of the promises in the iterable resolves or\n rejects, with the value or reason from that promise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4365},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":228142,"byte_end":228148,"line_start":4616,"line_end":4616,"column_start":12,"column_end":18},"name":"reject","qualname":"<Promise>::reject","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.reject(reason)` method returns a `Promise` object that is\n rejected with the given reason.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4368},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":228764,"byte_end":228771,"line_start":4626,"line_end":4626,"column_start":12,"column_end":19},"name":"resolve","qualname":"<Promise>::resolve","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.resolve(value)` method returns a `Promise` object that is\n resolved with the given value. If the value is a promise, that promise\n is returned; if the value is a thenable (i.e. has a \"then\" method), the\n returned promise will \"follow\" that thenable, adopting its eventual\n state; otherwise the returned promise will be fulfilled with the value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4371},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":229255,"byte_end":229260,"line_start":4635,"line_end":4635,"column_start":12,"column_end":17},"name":"catch","qualname":"<Promise>::catch","value":"fn (&self, cb: &Closure<dyn FnMut(JsValue)>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `catch()` method returns a `Promise` and deals with rejected cases\n only.  It behaves the same as calling `Promise.prototype.then(undefined,\n onRejected)` (in fact, calling `obj.catch(onRejected)` internally calls\n `obj.then(undefined, onRejected)`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4374},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":229652,"byte_end":229656,"line_start":4642,"line_end":4642,"column_start":12,"column_end":16},"name":"then","qualname":"<Promise>::then","value":"fn (&self, cb: &Closure<dyn FnMut(JsValue)>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `then()` method returns a `Promise`. It takes up to two arguments:\n callback functions for the success and failure cases of the `Promise`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4377},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":229834,"byte_end":229839,"line_start":4646,"line_end":4646,"column_start":12,"column_end":17},"name":"then2","qualname":"<Promise>::then2","value":"fn (&self, resolve: &Closure<dyn FnMut(JsValue)>, reject: &Closure<dyn FnMut(JsValue)>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" Same as `then`, only with both arguments provided.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4380},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":230615,"byte_end":230622,"line_start":4663,"line_end":4663,"column_start":12,"column_end":19},"name":"finally","qualname":"<Promise>::finally","value":"fn (&self, cb: &Closure<dyn FnMut()>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `finally()` method returns a `Promise`. When the promise is settled,\n whether fulfilled or rejected, the specified callback function is\n executed. This provides a way for code that must be executed once the\n `Promise` has been dealt with to be run whether the promise was\n fulfilled successfully or rejected.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":225402,"byte_end":225417,"line_start":4564,"line_end":4564,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":131},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":230846,"byte_end":230852,"line_start":4670,"line_end":4670,"column_start":8,"column_end":14},"name":"global","qualname":"::global","value":"fn () -> Object","parent":null,"children":[],"decl_id":null,"docs":" Returns a handle to the global scope object.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4636},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"Int8Array","qualname":"::Int8Array","value":"Int8Array {  }","parent":null,"children":[{"krate":0,"index":4637}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4598},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new","qualname":"<Int8Array>::new","value":"fn (constructor_arg: &JsValue) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Int8Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4601},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Int8Array>::new_with_length","value":"fn (length: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int8Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4604},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Int8Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4607},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Int8Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4610},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"fill","qualname":"<Int8Array>::fill","value":"fn (&self, value: i8, start: u32, end: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4613},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Int8Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4616},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Int8Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4619},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"slice","qualname":"<Int8Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4622},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Int8Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(i8, u32, Int8Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4625},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"length","qualname":"<Int8Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4628},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Int8Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4631},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Int8Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4634},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"set","qualname":"<Int8Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":4739},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"Int16Array","qualname":"::Int16Array","value":"Int16Array {  }","parent":null,"children":[{"krate":0,"index":4740}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4701},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new","qualname":"<Int16Array>::new","value":"fn (constructor_arg: &JsValue) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Int16Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4704},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Int16Array>::new_with_length","value":"fn (length: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int16Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4707},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Int16Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4710},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Int16Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4713},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"fill","qualname":"<Int16Array>::fill","value":"fn (&self, value: i16, start: u32, end: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4716},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Int16Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4719},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Int16Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4722},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"slice","qualname":"<Int16Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4725},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Int16Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(i16, u32, Int16Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4728},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"length","qualname":"<Int16Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4731},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Int16Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4734},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Int16Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4737},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"set","qualname":"<Int16Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":4842},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"Int32Array","qualname":"::Int32Array","value":"Int32Array {  }","parent":null,"children":[{"krate":0,"index":4843}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4804},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new","qualname":"<Int32Array>::new","value":"fn (constructor_arg: &JsValue) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Int32Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4807},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Int32Array>::new_with_length","value":"fn (length: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int32Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4810},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Int32Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4813},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Int32Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4816},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"fill","qualname":"<Int32Array>::fill","value":"fn (&self, value: i32, start: u32, end: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4819},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Int32Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4822},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Int32Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4825},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"slice","qualname":"<Int32Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4828},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Int32Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(i32, u32, Int32Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4831},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"length","qualname":"<Int32Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4834},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Int32Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4837},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Int32Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4840},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"set","qualname":"<Int32Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":4945},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"Uint8Array","qualname":"::Uint8Array","value":"Uint8Array {  }","parent":null,"children":[{"krate":0,"index":4946}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4907},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint8Array>::new","value":"fn (constructor_arg: &JsValue) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint8Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4910},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint8Array>::new_with_length","value":"fn (length: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4913},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint8Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4916},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint8Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4919},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint8Array>::fill","value":"fn (&self, value: u8, start: u32, end: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4922},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint8Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4925},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint8Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4928},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint8Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4931},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint8Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u8, u32, Uint8Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4934},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint8Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4937},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint8Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4940},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint8Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4943},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint8Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5048},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"Uint8ClampedArray","qualname":"::Uint8ClampedArray","value":"Uint8ClampedArray {  }","parent":null,"children":[{"krate":0,"index":5049}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5010},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint8ClampedArray>::new","value":"fn (constructor_arg: &JsValue) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint8ClampedArray()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5013},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint8ClampedArray>::new_with_length","value":"fn (length: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8ClampedArray()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5016},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint8ClampedArray>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8ClampedArray()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5019},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint8ClampedArray>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8ClampedArray()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5022},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint8ClampedArray>::fill","value":"fn (&self, value: u8, start: u32, end: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5025},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint8ClampedArray>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5028},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint8ClampedArray>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5031},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint8ClampedArray>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5034},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint8ClampedArray>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u8, u32, Uint8ClampedArray)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5037},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint8ClampedArray>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5040},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint8ClampedArray>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5043},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint8ClampedArray>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5046},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint8ClampedArray>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5151},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"Uint16Array","qualname":"::Uint16Array","value":"Uint16Array {  }","parent":null,"children":[{"krate":0,"index":5152}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5113},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint16Array>::new","value":"fn (constructor_arg: &JsValue) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint16Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5116},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint16Array>::new_with_length","value":"fn (length: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint16Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5119},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint16Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5122},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint16Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5125},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint16Array>::fill","value":"fn (&self, value: u16, start: u32, end: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5128},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint16Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5131},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint16Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5134},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint16Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5137},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint16Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u16, u32, Uint16Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5140},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint16Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5143},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint16Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5146},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint16Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5149},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint16Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5254},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"Uint32Array","qualname":"::Uint32Array","value":"Uint32Array {  }","parent":null,"children":[{"krate":0,"index":5255}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5216},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint32Array>::new","value":"fn (constructor_arg: &JsValue) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint32Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5219},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint32Array>::new_with_length","value":"fn (length: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint32Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5222},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint32Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5225},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint32Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5228},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint32Array>::fill","value":"fn (&self, value: u32, start: u32, end: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5231},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint32Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5234},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint32Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5237},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint32Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5240},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint32Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u32, u32, Uint32Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5243},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint32Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5246},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint32Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5249},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint32Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5252},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint32Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5357},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"Float32Array","qualname":"::Float32Array","value":"Float32Array {  }","parent":null,"children":[{"krate":0,"index":5358}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5319},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new","qualname":"<Float32Array>::new","value":"fn (constructor_arg: &JsValue) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Float32Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5322},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Float32Array>::new_with_length","value":"fn (length: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float32Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5325},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Float32Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5328},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Float32Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5331},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"fill","qualname":"<Float32Array>::fill","value":"fn (&self, value: f32, start: u32, end: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5334},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Float32Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5337},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Float32Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5340},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"slice","qualname":"<Float32Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5343},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Float32Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(f32, u32, Float32Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5346},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"length","qualname":"<Float32Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5349},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Float32Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5352},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Float32Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5355},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"set","qualname":"<Float32Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5460},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"Float64Array","qualname":"::Float64Array","value":"Float64Array {  }","parent":null,"children":[{"krate":0,"index":5461}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5422},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new","qualname":"<Float64Array>::new","value":"fn (constructor_arg: &JsValue) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Float64Array()`\n constructor creates an array of unsigned 8-bit integers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5425},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Float64Array>::new_with_length","value":"fn (length: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float64Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5428},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Float64Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float64Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5431},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Float64Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float64Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5434},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"fill","qualname":"<Float64Array>::fill","value":"fn (&self, value: f64, start: u32, end: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5437},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Float64Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5440},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Float64Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method stores multiple values in the typed array,\n reading input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5443},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"slice","qualname":"<Float64Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5446},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Float64Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(f64, u32, Float64Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5449},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"length","qualname":"<Float64Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5452},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Float64Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5455},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Float64Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5458},"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24},"name":"set","qualname":"<Float64Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":234109,"byte_end":234124,"line_start":4747,"line_end":4747,"column_start":9,"column_end":24}}]}],"impls":[{"id":54,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":22127,"byte_end":22136,"line_start":435,"line_end":435,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":22449,"byte_end":22458,"line_start":449,"line_end":449,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":22645,"byte_end":22654,"line_start":456,"line_end":456,"column_start":39,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":22705,"byte_end":22714,"line_start":458,"line_end":458,"column_start":43,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":22728,"byte_end":22733,"line_start":460,"line_end":460,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23333,"byte_end":23338,"line_start":484,"line_end":484,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38315,"byte_end":38322,"line_start":789,"line_end":789,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38568,"byte_end":38575,"line_start":803,"line_end":803,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38696,"byte_end":38703,"line_start":810,"line_end":810,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61519,"byte_end":61527,"line_start":1240,"line_end":1240,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Inherent","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":67916,"byte_end":67924,"line_start":1387,"line_end":1387,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":69943,"byte_end":69947,"line_start":1458,"line_end":1458,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":70108,"byte_end":70116,"line_start":1466,"line_end":1466,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":70355,"byte_end":70363,"line_start":1478,"line_end":1478,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Inherent","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":70504,"byte_end":70513,"line_start":1486,"line_end":1486,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91038,"byte_end":91044,"line_start":1930,"line_end":1930,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":463,"kind":"Inherent","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":127957,"byte_end":127963,"line_start":2621,"line_end":2621,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128354,"byte_end":128360,"line_start":2636,"line_end":2636,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128491,"byte_end":128497,"line_start":2643,"line_end":2643,"column_start":13,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":839,"kind":"Inherent","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":202344,"byte_end":202352,"line_start":4089,"line_end":4089,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":840,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":205220,"byte_end":205228,"line_start":4162,"line_end":4162,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":841,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":205348,"byte_end":205356,"line_start":4168,"line_end":4168,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":842,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":205493,"byte_end":205501,"line_start":4174,"line_end":4174,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":843,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":205645,"byte_end":205653,"line_start":4180,"line_end":4180,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":844,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":205793,"byte_end":205801,"line_start":4186,"line_end":4186,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":845,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":205927,"byte_end":205935,"line_start":4192,"line_end":4192,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":846,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206024,"byte_end":206032,"line_start":4198,"line_end":4198,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":847,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206181,"byte_end":206187,"line_start":4205,"line_end":4205,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":848,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206303,"byte_end":206309,"line_start":4211,"line_end":4211,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":849,"kind":"Direct","span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206399,"byte_end":206407,"line_start":4217,"line_end":4217,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":22127,"byte_end":22136,"line_start":435,"line_end":435,"column_start":34,"column_end":43},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":353},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":22449,"byte_end":22458,"line_start":449,"line_end":449,"column_start":45,"column_end":54},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":353},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":22645,"byte_end":22654,"line_start":456,"line_end":456,"column_start":39,"column_end":48},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":353},"to":{"krate":2,"index":3959}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":22705,"byte_end":22714,"line_start":458,"line_end":458,"column_start":43,"column_end":52},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":353},"to":{"krate":2,"index":3888}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":22728,"byte_end":22733,"line_start":460,"line_end":460,"column_start":6,"column_end":11},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":23333,"byte_end":23338,"line_start":484,"line_end":484,"column_start":40,"column_end":45},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":340},"to":{"krate":2,"index":3896}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38315,"byte_end":38322,"line_start":789,"line_end":789,"column_start":21,"column_end":28},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":628},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38568,"byte_end":38575,"line_start":803,"line_end":803,"column_start":26,"column_end":33},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":628},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":38696,"byte_end":38703,"line_start":810,"line_end":810,"column_start":21,"column_end":28},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":628},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":61519,"byte_end":61527,"line_start":1240,"line_end":1240,"column_start":6,"column_end":14},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":67916,"byte_end":67924,"line_start":1387,"line_end":1387,"column_start":6,"column_end":14},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":1332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":69943,"byte_end":69947,"line_start":1458,"line_end":1458,"column_start":34,"column_end":38},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":49},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":70108,"byte_end":70116,"line_start":1466,"line_end":1466,"column_start":23,"column_end":31},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":1332},"to":{"krate":2,"index":3900}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":70355,"byte_end":70363,"line_start":1478,"line_end":1478,"column_start":30,"column_end":38},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":53},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":70504,"byte_end":70513,"line_start":1486,"line_end":1486,"column_start":6,"column_end":15},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":56},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":91038,"byte_end":91044,"line_start":1930,"line_end":1930,"column_start":21,"column_end":27},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":1703},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":127957,"byte_end":127963,"line_start":2621,"line_end":2621,"column_start":6,"column_end":12},"kind":{"Impl":{"id":463}},"from":{"krate":0,"index":2129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128354,"byte_end":128360,"line_start":2636,"line_end":2636,"column_start":20,"column_end":26},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":2129},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":128491,"byte_end":128497,"line_start":2643,"line_end":2643,"column_start":13,"column_end":19},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":2129},"to":{"krate":2,"index":2050}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":202344,"byte_end":202352,"line_start":4089,"line_end":4089,"column_start":6,"column_end":14},"kind":{"Impl":{"id":839}},"from":{"krate":0,"index":3867},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":205220,"byte_end":205228,"line_start":4162,"line_end":4162,"column_start":25,"column_end":33},"kind":{"Impl":{"id":840}},"from":{"krate":0,"index":3867},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":205348,"byte_end":205356,"line_start":4168,"line_end":4168,"column_start":33,"column_end":41},"kind":{"Impl":{"id":841}},"from":{"krate":0,"index":3867},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":205493,"byte_end":205501,"line_start":4174,"line_end":4174,"column_start":28,"column_end":36},"kind":{"Impl":{"id":842}},"from":{"krate":0,"index":3867},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":205645,"byte_end":205653,"line_start":4180,"line_end":4180,"column_start":36,"column_end":44},"kind":{"Impl":{"id":843}},"from":{"krate":0,"index":3867},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":205793,"byte_end":205801,"line_start":4186,"line_end":4186,"column_start":28,"column_end":36},"kind":{"Impl":{"id":844}},"from":{"krate":0,"index":3867},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":205927,"byte_end":205935,"line_start":4192,"line_end":4192,"column_start":23,"column_end":31},"kind":{"Impl":{"id":845}},"from":{"krate":0,"index":3867},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206024,"byte_end":206032,"line_start":4198,"line_end":4198,"column_start":21,"column_end":29},"kind":{"Impl":{"id":846}},"from":{"krate":0,"index":3867},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206181,"byte_end":206187,"line_start":4205,"line_end":4205,"column_start":33,"column_end":39},"kind":{"Impl":{"id":847}},"from":{"krate":5,"index":4583},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206303,"byte_end":206309,"line_start":4211,"line_end":4211,"column_start":25,"column_end":31},"kind":{"Impl":{"id":848}},"from":{"krate":5,"index":4583},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/hniemeyer/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.35/src/lib.rs","byte_start":206399,"byte_end":206407,"line_start":4217,"line_end":4217,"column_start":21,"column_end":29},"kind":{"Impl":{"id":849}},"from":{"krate":0,"index":3867},"to":{"krate":2,"index":7573}}]}